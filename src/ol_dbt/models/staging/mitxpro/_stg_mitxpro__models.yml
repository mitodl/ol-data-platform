---
version: 2

models:
- name: stg__mitxpro__app__postgres__ecommerce_basketcoupon
  description: A row in this table is added when a coupon code is added to the users
    basket for a course or product they have not yet purchased
  columns:
  - name: basketcoupon_id
    description: int, primary key representing a coupon in a user's basket
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: basketcoupon_created_on
    description: timestamp, specifying when the coupon was added to a users basket
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: basketcoupon_updated_on
    description: timestamp, specifying when the coupon basket selection was updated
      most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: basket_id
    description: int, foreign key for ecommerce_basket
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
- name: stg__mitxpro__app__postgres__ecommerce_couponredemption
  description: A row in this table is added when an order uses a coupon code
  columns:
  - name: couponredemption_id
    description: int, primary key representing a coupon redemption
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponredemption_created_on
    description: timestamp, specifying when the coupon was redeemed
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponredemption_updated_on
    description: timestamp, specifying when the coupon redemption was updated most
      recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponversion_id
    description: int, foreign key for ecommerce_couponversion
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_id
    description: int, foreign key for ecommerce_order
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["couponversion_id", "order_id"]
- name: stg__mitxpro__app__postgres__ecommerce_couponproduct
  description: This table is used to limit coupons to a specific product. Coupons
    which do not have a record in this table are redeemable for all products
  columns:
  - name: couponproduct_id
    description: int, primary key representing a coupon product combo
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponproduct_created_on
    description: timestamp, specifying when the coupon product association was initially
      created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponproduct_updated_on
    description: timestamp, specifying when the coupon product association was most
      recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_id
    description: int, foreign key for ecommerce_product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programrun_id
    description: int, foreign key for courses_programrun, may be set when the product
      type is a program
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 6
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coupon_id", "product_id"]
- name: stg__mitxpro__app__postgres__ecommerce_company
  description: A company that purchases bulk enrollments to xpro courses or programs
  columns:
  - name: company_id
    description: int, primary key representing a company
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: company_created_on
    description: timestamp, specifying when the company record was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: company_updated_on
    description: timestamp, specifying when the company record was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: company_name
    description: string, company name
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 4
- name: stg__mitxpro__app__postgres__ecommerce_couponpaymentversion
  description: The ecommerce_couponpaymentversion holds information about a batch
    of coupons. A coupon payment version has information about the dollar of percentage
    amount of the discount, the number of available coupons that can be used to redeem
    the discount, how many times they can be redeemed and the source of the coupons.
    Coupon groups can be generated internally, for example to allow staff to enroll
    in courses without paying or marketing to create promos that allow learners to
    take a percentage or dollar amount off the full course price. Other coupon groups
    are created when a company buys bulk seats in a course for their employees, which
    generates a batch of 100% off coupons that learners can use to enroll in a course
    or program.
  columns:
  - name: couponpaymentversion_id
    description: int, primary key representing a coupon payment version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_created_on
    description: timestamp, specifying when the coupon payment version was initially
      created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_updated_on
    description: timestamp, specifying when the coupon paymemt  version was most recently
      updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_coupon_type
    description: string, one of 'single-use' or 'promo'.
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_num_coupon_codes
    description: int, number of coupon (and coupon version) objects associated with
      the payment version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_max_redemptions
    description: int, maximum number of redemptions for the coupon payment version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_max_redemptions_per_user
    description: int, maximum number of redemptions per user for the coupon payment
      version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_discount_amount
    description: number, either dollar amount or percentage (between 0 and 1) discount
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpayment_id
    description: int, foreign key to ecommerce_couponpayment
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_expires_on
    description: timestamp, expiration timestamp for the coupon payment version
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: couponpaymentversion_activated_on
    description: timestamp, activation timestamp for the coupon payment version
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: couponpaymentversion_is_automatic
    description: boolean, whether the coupon should be automatically applied to eligible
      orders
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_payment_type
    description: string, one of "credit_card", "purchase_order", "marketing, "sales",
      "staff". "staff" coupons are used to allow staff to enroll in courses. "marketing"
      coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
      and "sales" correspond to different ways that companies can pay for vouchers
      for their employees to enroll in courses or programs
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: couponpaymentversion_payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: couponpaymentversion_tag
    description: string, optional string tag used to identify the coupon payment version
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: company_id
    description: foreign key referencing ecommerce_company
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: couponpaymentversion_discount_type
    description: one of percent-off or dollars-off
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 17
- name: stg__mitxpro__app__postgres__ecommerce_couponpayment
  description: Most of the information for coupon payments is in couponpaymentversion
  columns:
  - name: couponpayment_id
    description: int, primary key representing a coupon payment
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: couponpayment_created_on
    description: timestamp, specifying when the coupon payment was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpayment_updated_on
    description: timestamp, specifying when the coupon paymemt was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpayment_name
    description: string, human readable name for the coupon payment
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 4
- name: stg__mitxpro__app__postgres__ecommerce_couponversion
  description: A version of a coupon linked to a specific couponpaymentversion record
  columns:
  - name: couponversion_id
    description: int, primary key representing a coupon version
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: couponversion_created_on
    description: timestamp, specifying when the coupon version was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponversion_updated_on
    description: timestamp, specifying when the coupon version was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_id
    description: int, foreign key referencing ecommerce_coupon
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_couponpaymentversion
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
- name: stg__mitxpro__app__postgres__ecommerce_coupon
  description: A coupon code that can be used to recieve a discount on a course or
    program
  columns:
  - name: coupon_id
    description: int, primary key representing a coupon
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: coupon_created_on
    description: timestamp, specifying when the coupon was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_updated_on
    description: timestamp, specifying when the coupon was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_code
    description: string, coupon code for the coupon
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: couponpayment_id
    description: int, foreign key to ecommerce_couponpayment
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_is_active
    description: boolean, whethere or not the coupon is currently active
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_applies_to_future_runs
    description: boolean, if true the coupon is automatically enabled for future runs
      of the product the coupon is associated with
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: coupon_is_global
    description: boolean, if true the coupon is valid for all products
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 8
- name: stg__mitxpro__app__postgres__ecommerce_orderaudit
  columns:
  - name: orderaudit_id
    description: int, primary key representing a change to the orders table
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: orderaudit_created_on
    description: timestamp, specifying when the order audit was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: orderaudit_updated_on
    description: timestamp, specifying when the order audit was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: orderaudit_data_before
    description: json, jsonified order object before the change
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: orderaudit_data_after
    description: json, jsonified order object after the change
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: orderaudit_acting_user_id
    description: int, reference to users_user table, the user who made the change
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: order_id
    description: int, reference to ecommerce_order
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 7
- name: stg__mitxpro__app__postgres__ecommerce_basketrunselection
  description: The course runs the user selected for the basket items in their basket.
    If the basket item is a course run, there is one ecommerce_basketrunselection
    record. If the basket item  is a program, there will be a record for each course
    run from the program that is selected by the user. Once the user completes the
    purchase, these records become records in the commerce_linerunselection
  columns:
  - name: basketrunselection_id
    description: int, primary key representing a basket course run selection
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: basketrunselection_created_on
    description: timestamp, specifying when the basket course run selection was initially
      created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basketrunselection_updated_on
    description: timestamp, specifying when the basket course run selection was most
      recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: basket_id
    description: int, primary key in ecommerce_basket
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["basket_id", "courserun_id"]
- name: stg__mitxpro__app__postgres__ecommerce_basketitem
  description: The ecommerce_products that the user has in their basket but has not
    purchased yet
  columns:
  - name: basketitem_id
    description: int, primary key representing a item in a user's basket
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basketitem_created_on
    description: timestamp, specifying when the basket item was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basketitem_updated_on
    description: timestamp, specifying when the basket item was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basketitem_quantity
    description: int, quantitiy of the item. Always 1
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: product_id
    description: int, foreign key referencing ecommerce_product
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_id
    description: int, foreign key referencing courses_programrun, present if the product
      is a program
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 7
- name: stg__mitxpro__app__postgres__ecommerce_basket
  description: Checkout basket that contains courseware that a users wants to purchase
    but has not purchased yet
  columns:
  - name: basket_id
    description: int, primary key representing a user basket
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basket_created_on
    description: timestamp, specifying when the basket was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: basket_updated_on
    description: timestamp, specifying when the basket was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 4
- name: stg__mitxpro__app__postgres__ecommerce_receipt
  description: Data returned from cybersource when a user pays for an order
  columns:
  - name: receipt_id
    description: int, primary key representing a receipt
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: receipt_created_on
    description: timestamp, specifying when the receipt was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: receipt_updated_on
    description: timestamp, specifying when the receipt most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: receipt_data
    description: json, cybersource data for a payment
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_id
    description: int, primary key in ecommerce_order
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
- name: stg__mitxpro__app__postgres__ecommerce_programrunline
  description: The program run the user selected when purchsing a program.
  columns:
  - name: programrunline_id
    description: int, primary key representing a line run selection
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: programrunline_created_on
    description: timestamp, specifying when the line program run selection was initially
      created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrunline_updated_on
    description: timestamp, specifying when the line program run selection was most
      recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programrun_id
    description: int, primary key in courses_programrun
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: line_id
    description: int, primary key in ecommerce_line
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
- name: stg__mitxpro__app__postgres__ecommerce_linerunselection
  description: The course runs the user selected when purchsing the courseware object.
    If the courseware object is a course run, there is one ecommerce_line_run_selection
    record. If the courseware object is a program, there will be a record for each
    course run from the program that is selected by the user
  columns:
  - name: linerunselection_id
    description: int, primary key representing a line course run selection
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: linerunselection_created_on
    description: timestamp, specifying when the line course run selection was initially
      created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: linerunselection_updated_on
    description: timestamp, specifying when the line course run selection was most
      recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: line_id
    description: int, primary key in ecommerce_line
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["line_id", "courserun_id"]
- name: stg__mitxpro__app__postgres__django_contenttype
  columns:
  - name: contenttype_id
    description: int, sequential ID for the django model
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: contenttype_full_name
    description: string, name for django model. A combination of the models name and
      functional group
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 2
- name: stg__mitxpro__app__postgres__ecommerce_product
  columns:
  - name: product_id
    description: int, primary key representing an ecommerce product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: product_created_on
    description: timestamp, specifying when the product was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_updated_on
    description: timestamp, specifying when the product was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: contenttype_id
    description: int, primary key in django_contenttype of the courseware. It is the
      key for courses_courserun or courses_program in production. There is a record
      where the courseware is courses_course on rc
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_object_id
    description: int, primary key in either courses_courserun or courses_program table
      of the courseware
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_is_active
    description: boolean, whether or not the product is currently purchasable
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_is_visible_in_bulk_form
    description: boolean, whether or not the product is purchasable through the bulk
      form at /ecommerce/bulk
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 7
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["contenttype_id", "product_object_id"]
- name: stg__mitxpro__app__postgres__ecommerce_productversion
  columns:
  - name: productversion_id
    description: int, primary key representing an ecommerce product version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: productversion_created_on
    description: timestamp, specifying when the product version was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: productversion_updated_on
    description: timestamp, specifying when the product version was most recently
      updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: productversion_price
    description: numeric, the product price for this version
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: productversion_description
    description: string, product version discriptiom
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_id
    description: int, primary key in ecommerce_product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: productversion_readable_id
    description: string, the readable_id field from the product object
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: productversion_requires_enrollment_code
    description: boolean, true if the learner is required to enter an enrollment code
      to enroll in the course or program at the checkout
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 8
- name: stg__mitxpro__app__postgres__ecommerce_line
  columns:
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: order_id
    description: int, foreign key in the orders_order table for the order that contains
      the line
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: line_created_on
    description: timestamp, specifying when the line was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: line_updated_on
    description: timestamp, specifying when the line was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: productversion_id
    description: int, foreign key in the ecommerce_productversion table. Versioned
      product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 5
- name: stg__mitxpro__app__postgres__ecommerce_order
  columns:
  - name: order_id
    description: int, primary key representing a single xpro order
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: order_state
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ['fulfilled', 'failed', 'created', 'refunded']
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_updated_on
    description: timestamp, specifying when the order was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was most created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 6
- name: stg__mitxpro__app__postgres__users_user
  columns:
  - name: user_id
    description: int, sequential ID representing one user in xPro
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: str, name chosen by user
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: str, user email associated with their account
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_is_active
    description: boolean, used to soft delete user accounts
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_full_name
    description: str, the user's full name
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_joined_on
    description: timestamp, specifying when a user account was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_last_login
    description: timestamp, specifying when a user last logged in
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 7
- name: stg__mitxpro__app__postgres__users_legaladdress
  columns:
  - name: user_address_id
    description: int, sequential ID
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_address_country
    description: string, user country code
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_id
    description: int, foreign key to users_user
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_last_name
    description: string, user last name
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_first_name
    description: string, user first name
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_street_address
    description: string, user street address
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_address_city
    description: string, user city
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_address_state_or_territory
    description: string, user state or territory
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_address_postal_code
    description: string, user postal code
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 9
- name: stg__mitxpro__app__postgres__users_profile
  columns:
  - name: user_profile_id
    description: int, sequential ID
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_gender
    description: str, user gender
    tests:
    - accepted_values:
        values: ['Male', 'Female', 'Other/Prefer not to say', '']
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_birth_year
    description: int, user birth year
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_company
    description: str, user company
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_job_title
    description: str, user job title
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_industry
    description: str, user job industry
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_job_function
    description: str, user job function
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_company_size
    description: str, company size
    tests:
    - accepted_values:
        values: ['Small/Start-up (1+ employees)', 'Small/Home office (1-9 employees)',
          'Small (10-99 employees)', 'Small to medium-sized (100-999 employees)',
          'Medium-sized (1000-9999 employees)', 'Large Enterprise (10,000+ employees)',
          "Other (N/A or Don''t know)"]
    - dbt_expectations.expect_column_to_exist
  - name: user_years_experience
    description: str, years experience
    tests:
    - accepted_values:
        values: ['Less than 2 years', '2-5 years', '6 - 10 years', '11 - 15 years',
          '16 - 20 years', 'More than 20 years', 'Prefer not to say']
    - dbt_expectations.expect_column_to_exist
  - name: user_leadership_level
    description: str, user leadership level
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_highest_education
    description: str, user highest education
    tests:
    - accepted_values:
        values: ['Doctorate', "Master''s or professional degree", "Bachelor''s degree",
          'Associate degree', 'Secondary/high school', 'Junior secondary/junior high/middle
            school', 'Elementary/primary school', 'No formal education', 'Other education',
          '']
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 12

- name: stg__mitxpro__app__postgres__courses_program
  columns:
  - name: program_id
    description: int, primary key representing a single MITxPro program
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_is_live
    description: boolean, indicating whether the program is available to users on
      MITxPro website
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_created_on
    description: timestamp, specifying when a program was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: program_updated_on
    description: timestamp, specifying when a program was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 6

- name: stg__mitxpro__app__postgres__courses_programrun
  columns:
  - name: programrun_id
    description: int, primary key representing a single MITxPro program run
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_id
    description: int, foreign key to courses_program representing a single MITxPro
      program
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: programrun_tag
    description: str, string that identifies a single run in a program e.g. R0
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: programrun_start_on
    description: timestamp, specifying when the program run begins
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_end_on
    description: timestamp, specifying when the program run ends
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_created_on
    description: timestamp, specifying when the program run was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_updated_on
    description: timestamp, specifying when the program run was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 7
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["program_id", "programrun_tag"]

- name: stg__mitxpro__app__postgres__courses_course
  columns:
  - name: course_id
    description: int, primary key representing a single MITxPro course
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: course_is_live
    description: boolean, indicating whether the course is available to users on MITxPro
      website
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_id
    description: id, foreign key to courses_program
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: course_readable_id
    description: str, Open edX ID formatted as course-v1:{org}+{course code} e.g.
      course-v1:xPRO+MLx2
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: position_in_program
    description: int, sequential number indicating the course display order in a program
      on MITxPro website
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: course_created_on
    description: timestamp, specifying when a course was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: course_updated_on
    description: timestamp, specifying when a course was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 8

- name: stg__mitxpro__app__postgres__courses_courserun
  columns:
  - name: courserun_id
    description: int, primary key representing a single MITxPro course run
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: course_id
    description: int, foreign key to courses_course representing a single MITxPro
      course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_is_live
    description: boolean, indicating whether the course run is available to users
      on MITxPro website
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_tag
    description: str, string that identifies a single run in a program e.g. R0
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_url
    description: str, url location for the course run on MITxPro website
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_start_on
    description: timestamp, specifying when the course begins
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_end_on
    description: timestamp, specifying when the course ends
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_enrollment_start_on
    description: timestamp, specifying when enrollment starts
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_enrollment_end_on
    description: timestamp, specifying when enrollment ends
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_expired_on
    description: timestamp, specifying the date time beyond which users should not
      see link to this course run on their dashboard
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_created_on
    description: timestamp, specifying when a course run was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_updated_on
    description: timestamp, specifying when a course run was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 14
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "courserun_tag"]

- name: stg__mitxpro__app__postgres__courses_coursetopic
  columns:
  - name: coursetopic_id
    description: int, primary key representing a single MITxPro course topic
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: coursetopic_created_on
    description: timestamp, specifying when a course topic was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: coursetopic_updated_on
    description: timestamp, specifying when a course topic was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 4

- name: stg__mitxpro__app__postgres__courses_courserungrade
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MIT xPro grade record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_is_set_by_admin
    description: boolean, indicating whether this grade is set by a staff user
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_created_on
    description: timestamp, specifying when a grade was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_updated_on
    description: timestamp, specifying when a grade was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 9
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__courses_courseruncertificate
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MIT xPro course certificate
      record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: courseruncertificate_created_on
    description: timestamp, specifying when a certificate was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courseruncertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 8
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__courses_programcertificate
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MIT xPro program certificate
      record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_program')
        field: program_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: programcertificate_created_on
    description: timestamp, specifying when a certificate was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programcertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 8
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id"]

- name: stg__mitxpro__app__postgres__courses_course_to_topic
  columns:
  - name: coursetotopic_id
    description: int, primary key representing a single MITxPro course tagged to a
      topic
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: coursetopic_id
    description: int, foreign key to courses_coursetopic representing a single course
      topic
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 3
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coursetopic_id", "course_id"]
- name: stg__mitxpro__app__postgres__courses_courserunenrollment
  columns:
  - name: courserunenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserunenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'unenrolled', 'enrolled'
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 10
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id", "ecommerce_order_id"]
- name: stg__mitxpro__app__postgres__courses_programenrollment
  columns:
  - name: programenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: program_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 9
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id", "ecommerce_order_id"]
