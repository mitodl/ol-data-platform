---
version: 2

models:
- name: stg__mitxpro__app__postgres__b2becommerce_b2breceipt
  description: Data returned from cybersource when a user pays for a b2b order
  columns:
  - name: b2breceipt_id
    description: int, primary key representing a b2b receipt
    tests:
    - not_null
    - unique
  - name: b2breceipt_created_on
    description: timestamp, specifying when the b2b receipt was initially created
    tests:
    - not_null
  - name: b2breceipt_updated_on
    description: timestamp, specifying when the b2b receipt most recently updated
    tests:
    - not_null
  - name: b2breceipt_data
    description: json, cybersource data for a payment
    tests:
    - not_null
  - name: b2border_id
    description: int, primary key in b2becommerce_b2border

- name: stg__mitxpro__app__postgres__b2becommerce_b2borderaudit
  columns:
  - name: b2borderaudit_id
    description: int, primary key representing a change to the b2borders table
    tests:
    - not_null
    - unique
  - name: b2borderaudit_created_on
    description: timestamp, specifying when the b2b order audit was initially created
    tests:
    - not_null
  - name: b2borderaudit_updated_on
    description: timestamp, specifying when the b2b order audit was most recently
      updated
    tests:
    - not_null
  - name: b2borderaudit_data_before
    description: json, jsonified b2b order object before the change
  - name: b2borderaudit_data_after
    description: json, jsonified b2b order object after the change
  - name: b2borderaudit_acting_user_id
    description: int, reference to users_user table, the user who made the change
  - name: b2border_id
    description: int, reference to b2becommerce_b2border

- name: stg__mitxpro__app__postgres__b2becommerce_b2border
  description: A B2B order is created when a company or other purchaser buys enrollment
    codes for many of learners through the xpro web form. This creates full price
    off coupons that learners can redeem for an enrollment
  columns:
  - name: b2border_id
    description: int, primary key representing a b2b order
    tests:
    - not_null
    - unique
  - name: b2border_created_on
    description: timestamp, specifying when the b2b order was initially created
    tests:
    - not_null
  - name: b2border_updated_on
    description: timestamp, specifying when the b2b order was most recently updated
    tests:
    - not_null
  - name: b2border_status
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
    tests:
    - not_null
  - name: b2border_num_seats
    description: int, number of enrollment codes that were purchased
    tests:
    - not_null
  - name: b2border_email
    description: string, email where the enrollment codes were sent
    tests:
    - not_null
  - name: b2border_per_item_price
    description: numeric, per item price for each enrollment code
    tests:
    - not_null
  - name: b2border_total_price
    description: numeric, total price for the order
    tests:
    - not_null
  - name: productversion_id
    description: int, foreign key to ecommerce_productversion. The course run or program
      for which the enrollment codes were purchased
    tests:
    - not_null
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_productcouponversion. The coupon payment
      version of the enrollment codes generated by this order
  - name: b2border_unique_uuid
    description: string, auto generated uuid used to identify the order
    tests:
    - not_null
    - unique
  - name: b2border_discount
    description: numeric, dollar discount amount for the order
  - name: b2bcoupon_id
    description: int, foreign key to b2becommerce_b2bcoupon. A coupon that was redeemed
      for the order.
  - name: b2border_contract_number
    description: string, contract number used to identify the order
  - name: programrun_id
    description: int, foreign key to courses_programrun. Set when the product is a
      program

- name: stg__mitxpro__app__postgres__b2becommerce_b2bcouponaudit
  columns:
  - name: b2bcouponaudit_id
    description: int, primary key representing a change to the b2bcoupons table
  - name: b2bcouponaudit_created_on
    description: timestamp, specifying when the b2bcoupon audit was initially created
  - name: b2bcouponaudit_updated_on
    description: timestamp, specifying when the b2bcoupon audit was most recently
      updated
  - name: b2bcouponaudit_data_before
    description: json, jsonified b2bcoupon object before the change
  - name: b2bcouponaudit_data_after
    description: json, jsonified b2bcoupon object after the change
  - name: b2bcouponaudit_acting_user_id
    description: int, reference to users_user table, the user who made the change
  - name: b2bcoupon_id
    description: int, reference to b2becommerce_b2bcoupon

- name: stg__mitxpro__app__postgres__b2becommerce_b2bcoupon
  description: B2B coupons are coupons that allow us to give a discount to companies
    buying bulk seats for their employees
  columns:
  - name: b2bcoupon_id
    description: int, primary key representing a b2b coupon
    tests:
    - not_null
    - unique
  - name: b2bcoupon_created_on
    description: timestamp, specifying when the b2b coupon was initially created
    tests:
    - not_null
  - name: b2bcoupon_updated_on
    description: timestamp, specifying when the b2b coupon was most recently updated
    tests:
    - not_null
  - name: b2bcoupon_name
    description: string, human readable name to indentify the b2b coupon
    tests:
    - not_null
  - name: b2bcoupon_coupon_code
    description: string, coupon code for the coupon
    tests:
    - not_null
  - name: b2bcoupon_discount_percent
    description: numeric, the discount percenage. Between 0 and 1
    tests:
    - not_null
  - name: b2bcoupon_is_enabled
    description: boolean, whether the b2b coupon is usable
    tests:
    - not_null
  - name: b2bcoupon_expires_on
    description: timestamp, expiration timestamp for the b2b coupon
  - name: b2bcoupon_activated_on
    description: timestamp, activation timestamp for the b2b coupon
  - name: company_id
    description: foreign key to ecommerce_company. If no company id is set the b2b
      coupon can be used by any company
  - name: product_id
    description: int, foreign key for ecommerce_product. If no product id is set,
      the b2b coupon can be used for any product
  - name: b2bcoupon_is_reusable
    description: boolean, when true the coupon can be redeemed multiple times
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_productcouponassignment
  description: Coupon assignments made through bulk coupon assignment google sheets.
    These coupons can be redeemed by users with a specific email for a specific product
  columns:
  - name: productcouponassignment_id
    description: int, primary key representing a coupon assignment
    tests:
    - not_null
    - unique
  - name: productcouponassignment_created_on
    description: timestamp, specifying when the oupon assignment was created
    tests:
    - not_null
  - name: productcouponassignment_updated_on
    description: timestamp, specifying when the  coupon assignment was most recently
      updated
    tests:
    - not_null
  - name: productcouponassignment_email
    description: string, user email that can redeem the coupon
    tests:
    - not_null
  - name: couponproduct_id
    description: int, foreign key to ecommerce_couponeproduct, which has a coupon
      and product pair
    tests:
    - not_null
  - name: productcouponassignment_is_redeemed
    description: boolean, whether the user redeemed the coupon to enroll in the course
    tests:
    - not_null
  - name: bulkcouponassignment_id
    description: int, foreign key to ecommerce_bulkcouponassignment
  - name: productcouponassignment_message_status
    description: string, email message status. One of  "delivered", "failed", "opened",
      "clicked"
  - name: productcouponassignment_message_status_updated_on
    description: timestamp, timestamp when the message status was last updated
  - name: productcouponassignment_original_email
    description: string, original email for the record, used when the email for a
      coupon needs to change

- name: stg__mitxpro__app__postgres__ecommerce_bulkcouponassignment
  description: xPro has functionality for companies to assign coupons codes (usually
    full price vouchers) to employees through a google drive sheet. People that get
    a coupon recieve an email with their coupon code and enrollment instructions.
    This table controls that functionality.
  columns:
  - name: bulkcouponassignment_id
    description: int, primary key representing a bulk coupon assignment sheet
    tests:
    - not_null
    - unique
  - name: bulkcouponassignment_created_on
    description: timestamp, specifying when the bulk coupon assignment sheet record
      was created
  - name: bulkcouponassignment_updated_on
    description: timestamp, specifying when the bulk coupon assignment sheet record
      was most recently updated
  - name: bulkcouponassignment_assignment_sheet_id
    description: string, google drive id for the sheet used to make the assignments
  - name: bulkcouponassignment_assignments_started_on
    description: timestamp, timestamp when we started assigning coupons and sending
      emails to the email addresses in the sheet
  - name: bulkcouponassignment_message_delivery_completed_on
    description: timestamp, timestamp when all the emails with enrollment coupons
      have been sent
  - name: bulkcouponassignment_sheet_last_modified_on
    description: timestamp, timestamp when the google spreadsheet used for coupon
      assignments was last modified
  - name: bulkcouponassignment_last_assignment_on
    description: timestamp, timestamp when a coupon was last assigned to a user on
      the list

- name: stg__mitxpro__app__postgres__ecommerce_couponbasket
  description: A row in this table is added when a coupon code is added to the users
    basket for a course or product they have not yet purchased
  columns:
  - name: couponbasket_id
    description: int, primary key representing a coupon in a user's basket
    tests:
    - not_null
  - name: couponbasket_created_on
    description: timestamp, specifying when the coupon was added to a users basket
    tests:
    - not_null
  - name: couponbasket_updated_on
    description: timestamp, specifying when the coupon basket selection was updated
      most recently updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
    tests:
    - not_null
  - name: basket_id
    description: int, foreign key for ecommerce_basket
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_couponredemption
  description: A row in this table is added when an order uses a coupon code
  columns:
  - name: couponredemption_id
    description: int, primary key representing a coupon redemption
    tests:
    - not_null
  - name: couponredemption_created_on
    description: timestamp, specifying when the coupon was redeemed
    tests:
    - not_null
  - name: couponredemption_updated_on
    description: timestamp, specifying when the coupon redemption was updated most
      recently updated
    tests:
    - not_null
  - name: couponversion_id
    description: int, foreign key for ecommerce_couponversion
    tests:
    - not_null
  - name: order_id
    description: int, foreign key for ecommerce_order
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["couponversion_id", "order_id"]

- name: stg__mitxpro__app__postgres__ecommerce_couponproduct
  description: This table is used to limit coupons to a specific product. Coupons
    which do not have a record in this table are redeemable for all products
  columns:
  - name: couponproduct_id
    description: int, primary key representing a coupon product combo
    tests:
    - not_null
  - name: couponproduct_created_on
    description: timestamp, specifying when the coupon product association was initially
      created
    tests:
    - not_null
  - name: couponproduct_updated_on
    description: timestamp, specifying when the coupon product association was most
      recently updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
    tests:
    - not_null
  - name: product_id
    description: int, foreign key for ecommerce_product
    tests:
    - not_null
  - name: programrun_id
    description: int, foreign key for courses_programrun, may be set when the product
      type is a program
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coupon_id", "product_id"]

- name: stg__mitxpro__app__postgres__ecommerce_company
  description: A company that purchases bulk enrollments to xpro courses or programs
  columns:
  - name: company_id
    description: int, primary key representing a company
    tests:
    - unique
    - not_null
  - name: company_created_on
    description: timestamp, specifying when the company record was initially created
    tests:
    - not_null
  - name: company_updated_on
    description: timestamp, specifying when the company record was most recently updated
    tests:
    - not_null
  - name: company_name
    description: string, company name
    tests:
    - unique
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_couponpaymentversion
  description: The ecommerce_couponpaymentversion holds information about a batch
    of coupons. A coupon payment version has information about the dollar or percentage
    amount of the discount, the number of available coupons that can be used to redeem
    the discount, how many times they can be redeemed and the source of the coupons.
    Coupon groups can be generated internally, for example to allow staff to enroll
    in courses without paying or marketing to create promos that allow learners to
    take a percentage or dollar amount off the full course price. Other coupon groups
    are created when a company buys bulk seats in a course for their employees, which
    generates a batch of 100% off coupons that learners can use to enroll in a course
    or program.
  columns:
  - name: couponpaymentversion_id
    description: int, primary key representing a coupon payment version
    tests:
    - not_null
  - name: couponpaymentversion_created_on
    description: timestamp, specifying when the coupon payment version was initially
      created
    tests:
    - not_null
  - name: couponpaymentversion_updated_on
    description: timestamp, specifying when the coupon paymemt  version was most recently
      updated
    tests:
    - not_null
  - name: couponpaymentversion_coupon_type
    description: string, one of 'single-use' or 'promo'.
    tests:
    - not_null
  - name: couponpaymentversion_num_coupon_codes
    description: int, number of coupon (and coupon version) objects associated with
      the payment version
    tests:
    - not_null
  - name: couponpaymentversion_max_redemptions
    description: int, maximum number of redemptions for the coupon payment version
    tests:
    - not_null
  - name: couponpaymentversion_max_redemptions_per_user
    description: int, maximum number of redemptions per user for the coupon payment
      version
    tests:
    - not_null
  - name: couponpaymentversion_discount_amount
    description: number, either dollar amount or percentage (between 0 and 1) discount
    tests:
    - not_null
  - name: couponpayment_id
    description: int, foreign key to ecommerce_couponpayment
    tests:
    - not_null
  - name: couponpaymentversion_expires_on
    description: timestamp, expiration timestamp for the coupon payment version
  - name: couponpaymentversion_activated_on
    description: timestamp, activation timestamp for the coupon payment version
  - name: couponpaymentversion_is_automatic
    description: boolean, whether the coupon should be automatically applied to eligible
      orders
    tests:
    - not_null
  - name: couponpaymentversion_discount_source
    description: string, one of "credit_card", "purchase_order", "marketing", "sales",
      "staff". "staff" coupons are used to allow staff to enroll in courses. "marketing"
      coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
      and "sales" correspond to different ways that companies can pay for vouchers
      for their employees to enroll in courses or programs
    tests:
    - accepted_values:
        values: ["credit_card", "purchase_order", "marketing", "sales", "staff", ""]
  - name: couponpaymentversion_payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies
  - name: couponpaymentversion_tag
    description: string, optional string tag used to identify the coupon payment version
  - name: company_id
    description: foreign key referencing ecommerce_company
  - name: couponpaymentversion_discount_type
    description: one of percent-off or dollars-off
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_couponpayment
  description: Most of the information for coupon payments is in couponpaymentversion
  columns:
  - name: couponpayment_id
    description: int, primary key representing a coupon payment
    tests:
    - unique
    - not_null
  - name: couponpayment_created_on
    description: timestamp, specifying when the coupon payment was initially created
    tests:
    - not_null
  - name: couponpayment_updated_on
    description: timestamp, specifying when the coupon paymemt was most recently updated
    tests:
    - not_null
  - name: couponpayment_name
    description: string, human readable name for the coupon payment
    tests:
    - unique
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_couponversion
  description: A version of a coupon linked to a specific couponpaymentversion record
  columns:
  - name: couponversion_id
    description: int, primary key representing a coupon version
    tests:
    - unique
    - not_null
  - name: couponversion_created_on
    description: timestamp, specifying when the coupon version was initially created
    tests:
    - not_null
  - name: couponversion_updated_on
    description: timestamp, specifying when the coupon version was most recently updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key referencing ecommerce_coupon
    tests:
    - not_null
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_couponpaymentversion
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_coupon
  description: A coupon code that can be used to recieve a discount on a course or
    program
  columns:
  - name: coupon_id
    description: int, primary key representing a coupon
    tests:
    - unique
    - not_null
  - name: coupon_created_on
    description: timestamp, specifying when the coupon was initially created
    tests:
    - not_null
  - name: coupon_updated_on
    description: timestamp, specifying when the coupon was most recently updated
    tests:
    - not_null
  - name: coupon_code
    description: string, coupon code for the coupon
    tests:
    - not_null
  - name: couponpayment_id
    description: int, foreign key to ecommerce_couponpayment
    tests:
    - not_null
  - name: coupon_is_active
    description: boolean, whethere or not the coupon is currently active
    tests:
    - not_null
  - name: coupon_applies_to_future_runs
    description: boolean, if true the coupon is automatically enabled for future runs
      of the product the coupon is associated with
    tests:
    - not_null
  - name: coupon_is_global
    description: boolean, if true the coupon is valid for all products
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_orderaudit
  columns:
  - name: orderaudit_id
    description: int, primary key representing a change to the orders table
  - name: orderaudit_created_on
    description: timestamp, specifying when the order audit was initially created
  - name: orderaudit_updated_on
    description: timestamp, specifying when the order audit was most recently updated
  - name: orderaudit_data_before
    description: json, jsonified order object before the change
  - name: orderaudit_data_after
    description: json, jsonified order object after the change
  - name: orderaudit_acting_user_id
    description: int, reference to users_user table, the user who made the change
  - name: order_id
    description: int, reference to ecommerce_order

- name: stg__mitxpro__app__postgres__ecommerce_basketrunselection
  description: The course runs the user selected for the basket items in their basket.
    If the basket item is a course run, there is one ecommerce_basketrunselection
    record. If the basket item  is a program, there will be a record for each course
    run from the program that is selected by the user. Once the user completes the
    purchase, these records become records in the commerce_linerunselection
  columns:
  - name: basketrunselection_id
    description: int, primary key representing a basket course run selection
    tests:
    - not_null
    - unique
  - name: basketrunselection_created_on
    description: timestamp, specifying when the basket course run selection was initially
      created
  - name: basketrunselection_updated_on
    description: timestamp, specifying when the basket course run selection was most
      recently updated
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - not_null
  - name: basket_id
    description: int, primary key in ecommerce_basket
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["basket_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__ecommerce_basketitem
  description: The ecommerce_products that the user has in their basket but has not
    purchased yet
  columns:
  - name: basketitem_id
    description: int, primary key representing a item in a user's basket
  - name: basketitem_created_on
    description: timestamp, specifying when the basket item was initially created
  - name: basketitem_updated_on
    description: timestamp, specifying when the basket item was most recently updated
  - name: basketitem_quantity
    description: int, quantitiy of the item. Always 1
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: product_id
    description: int, foreign key referencing ecommerce_product
  - name: programrun_id
    description: int, foreign key referencing courses_programrun, present if the product
      is a program

- name: stg__mitxpro__app__postgres__ecommerce_basket
  description: Checkout basket that contains courseware that a users wants to purchase
    but has not purchased yet
  columns:
  - name: basket_id
    description: int, primary key representing a user basket
  - name: basket_created_on
    description: timestamp, specifying when the basket was initially created
  - name: basket_updated_on
    description: timestamp, specifying when the basket was most recently updated
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - unique

- name: stg__mitxpro__app__postgres__ecommerce_receipt
  description: Data returned from cybersource when a user pays for an order
  columns:
  - name: receipt_id
    description: int, primary key representing a receipt
    tests:
    - not_null
    - unique
  - name: receipt_created_on
    description: timestamp, specifying when the receipt was initially created
    tests:
    - not_null
  - name: receipt_updated_on
    description: timestamp, specifying when the receipt most recently updated
    tests:
    - not_null
  - name: receipt_data
    description: json, cybersource data for a payment
    tests:
    - not_null
  - name: order_id
    description: int, primary key in ecommerce_order

- name: stg__mitxpro__app__postgres__ecommerce_programrunline
  description: The program run the user selected when purchsing a program.
  columns:
  - name: programrunline_id
    description: int, primary key representing a line run selection
    tests:
    - not_null
    - unique
  - name: programrunline_created_on
    description: timestamp, specifying when the line program run selection was initially
      created
  - name: programrunline_updated_on
    description: timestamp, specifying when the line program run selection was most
      recently updated
    tests:
    - not_null
  - name: programrun_id
    description: int, primary key in courses_programrun
    tests:
    - not_null
  - name: line_id
    description: int, primary key in ecommerce_line
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_linerunselection
  description: The course runs the user selected when purchsing the courseware object.
    If the courseware object is a course run, there is one ecommerce_line_run_selection
    record. If the courseware object is a program, there will be a record for each
    course run from the program that is selected by the user
  columns:
  - name: linerunselection_id
    description: int, primary key representing a line course run selection
    tests:
    - not_null
    - unique
  - name: linerunselection_created_on
    description: timestamp, specifying when the line course run selection was initially
      created
  - name: linerunselection_updated_on
    description: timestamp, specifying when the line course run selection was most
      recently updated
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - not_null
  - name: line_id
    description: int, primary key in ecommerce_line
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["line_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__django_contenttype
  columns:
  - name: contenttype_id
    description: int, sequential ID for the django model
    tests:
    - unique
    - not_null
  - name: contenttype_full_name
    description: string, name for django model. A combination of the models name and
      functional group
    tests:
    - unique
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_product
  columns:
  - name: product_id
    description: int, primary key representing an ecommerce product
    tests:
    - not_null
    - unique
  - name: product_created_on
    description: timestamp, specifying when the product was initially created
    tests:
    - not_null
  - name: product_updated_on
    description: timestamp, specifying when the product was most recently updated
    tests:
    - not_null
  - name: contenttype_id
    description: int, primary key in django_contenttype of the courseware. It is the
      key for courses_courserun or courses_program in production. There is a record
      where the courseware is courses_course on rc
    tests:
    - not_null
  - name: product_object_id
    description: int, primary key in either courses_courserun or courses_program table
      of the courseware
    tests:
    - not_null
  - name: product_is_active
    description: boolean, whether or not the product is currently purchasable
    tests:
    - not_null
  - name: product_is_visible_in_bulk_form
    description: boolean, whether or not the product is purchasable through the bulk
      form at /ecommerce/bulk
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["contenttype_id", "product_object_id"]
- name: stg__mitxpro__app__postgres__ecommerce_productversion
  columns:
  - name: productversion_id
    description: int, primary key representing an ecommerce product version
    tests:
    - not_null
    - unique
  - name: productversion_created_on
    description: timestamp, specifying when the product version was initially created
    tests:
    - not_null
  - name: productversion_updated_on
    description: timestamp, specifying when the product version was most recently
      updated
    tests:
    - not_null
  - name: productversion_price
    description: numeric, the product price for this version
    tests:
    - not_null
  - name: productversion_description
    description: string, product version discriptiom
    tests:
    - not_null
  - name: product_id
    description: int, primary key in ecommerce_product
    tests:
    - not_null
  - name: productversion_readable_id
    description: string, the readable_id field from the product object
  - name: productversion_requires_enrollment_code
    description: boolean, true if the learner is required to enter an enrollment code
      to enroll in the course or program at the checkout
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_line
  columns:
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - unique
    - not_null
  - name: order_id
    description: int, foreign key in the orders_order table for the order that contains
      the line
    tests:
    - not_null
  - name: line_created_on
    description: timestamp, specifying when the line was initially created
  - name: line_updated_on
    description: timestamp, specifying when the line was most recently updated
  - name: productversion_id
    description: int, foreign key in the ecommerce_productversion table. Versioned
      product
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__ecommerce_order
  columns:
  - name: order_id
    description: int, primary key representing a single xpro order
    tests:
    - unique
    - not_null
  - name: order_state
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
    tests:
    - not_null
    - accepted_values:
        values: ['fulfilled', 'failed', 'created', 'refunded']
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - not_null
  - name: order_updated_on
    description: timestamp, specifying when the order was most recently updated
    tests:
    - not_null
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was most created
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__users_user
  columns:
  - name: user_id
    description: int, sequential ID representing one user in xPro
    tests:
    - unique
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - unique
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - unique
    - not_null
  - name: user_is_active
    description: boolean, used to soft delete user accounts
  - name: user_full_name
    description: str, the user's full name
    tests:
    - not_null
  - name: user_joined_on
    description: timestamp, specifying when a user account was initially created
  - name: user_last_login
    description: timestamp, specifying when a user last logged in

- name: stg__mitxpro__app__postgres__users_legaladdress
  columns:
  - name: user_address_id
    description: int, sequential ID
    tests:
    - unique
    - not_null
  - name: user_address_country
    description: string, user country code
    tests:
    - not_null
  - name: user_id
    description: int, foreign key to users_user
    tests:
    - unique
    - not_null
  - name: user_last_name
    description: string, user last name
    tests:
    - not_null
  - name: user_first_name
    description: string, user first name
    tests:
    - not_null
  - name: user_street_address
    description: string, user street address
    tests:
    - not_null
  - name: user_address_city
    description: string, user city
    tests:
    - not_null
  - name: user_address_state_or_territory
    description: string, user state or territory
    tests:
    - not_null
  - name: user_address_postal_code
    description: string, user postal code
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__users_profile
  columns:
  - name: user_profile_id
    description: int, sequential ID
    tests:
    - unique
    - not_null
  - name: user_gender
    description: str, user gender
    tests:
    - accepted_values:
        values: ['Male', 'Female', 'Other/Prefer Not to Say', '']
    - not_null
  - name: user_birth_year
    description: int, user birth year
  - name: user_company
    description: str, user company
    tests:
    - not_null
  - name: user_job_title
    description: str, user job title
    tests:
    - not_null
  - name: user_industry
    description: str, user job industry
    tests:
    - not_null
  - name: user_job_function
    description: str, user job function
    tests:
    - not_null
  - name: user_company_size
    description: str, company size
    tests:
    - accepted_values:
        values: ['Small/Start-up (1+ employees)', 'Small/Home office (1-9 employees)',
          'Small (10-99 employees)', 'Small to medium-sized (100-999 employees)',
          'Medium-sized (1000-9999 employees)', 'Large Enterprise (10,000+ employees)',
          "Other (N/A or Don''t know)"]
  - name: user_years_experience
    description: str, years experience
    tests:
    - accepted_values:
        values: ['Less than 2 years', '2-5 years', '6 - 10 years', '11 - 15 years',
          '16 - 20 years', 'More than 20 years', 'Prefer not to say']
  - name: user_leadership_level
    description: str, user leadership level
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - unique
    - not_null
  - name: user_highest_education
    description: str, user highest education
    tests:
    - accepted_values:
        values: '{{ var("highest_education_values") }}'
    - not_null

- name: stg__mitxpro__app__postgres__courses_program
  columns:
  - name: program_id
    description: int, primary key representing a single MITxPro program
    tests:
    - unique
    - not_null
  - name: program_is_live
    description: boolean, indicating whether the program is available to users on
      MITxPro website
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
    tests:
    - unique
    - not_null
  - name: program_created_on
    description: timestamp, specifying when a program was initially created
  - name: program_updated_on
    description: timestamp, specifying when a program was most recently updated
  - name: program_is_external
    description: boolean, whether the program is on an external platform
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__courses_programrun
  columns:
  - name: programrun_id
    description: int, primary key representing a single MITxPro program run
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single MITxPro
      program
    tests:
    - not_null
  - name: programrun_tag
    description: str, string that identifies a single run in a program e.g. R0
    tests:
    - not_null
  - name: programrun_start_on
    description: timestamp, specifying when the program run begins
  - name: programrun_end_on
    description: timestamp, specifying when the program run ends
  - name: programrun_created_on
    description: timestamp, specifying when the program run was initially created
  - name: programrun_updated_on
    description: timestamp, specifying when the program run was most recently updated
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["program_id", "programrun_tag"]

- name: stg__mitxpro__app__postgres__courses_course
  columns:
  - name: course_id
    description: int, primary key representing a single MITxPro course
    tests:
    - unique
    - not_null
  - name: course_is_live
    description: boolean, indicating whether the course is available to users on MITxPro
      website
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
  - name: program_id
    description: id, foreign key to courses_program
  - name: course_readable_id
    description: str, Open edX ID formatted as course-v1:{org}+{course code} e.g.
      course-v1:xPRO+MLx2
    tests:
    - unique
    - not_null
  - name: course_edx_readable_id
    description: str, The edx course ID of the course in the format as {org}/{course}
    tests:
    - unique
    - not_null
  - name: position_in_program
    description: int, sequential number indicating the course display order in a program
      on MITxPro website
  - name: course_created_on
    description: timestamp, specifying when a course was initially created
  - name: course_updated_on
    description: timestamp, specifying when a course was most recently updated
  - name: course_is_external
    description: boolean, whether the course is on an external platform
    tests:
    - not_null

- name: stg__mitxpro__app__postgres__courses_courserun
  columns:
  - name: courserun_id
    description: int, primary key representing a single MITxPro course run
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single MITxPro
      course
    tests:
    - not_null
  - name: courserun_is_live
    description: boolean, indicating whether the course run is available to users
      on MITxPro website
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_tag
    description: str, string that identifies a single run in a program e.g. R0
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
    tests:
    - unique
    - not_null
  - name: courserun_edx_readable_id
    description: str, The edx course ID of the course run in the format as {org}/{course}/{run}.
      it can be used to match courserun_readable_id in stg__edxorg__bigquery__mitx_courserun
    tests:
    - unique
    - not_null
  - name: courserun_url
    description: str, url location for the course run on MITxPro website
  - name: courserun_start_on
    description: timestamp, specifying when the course begins
  - name: courserun_end_on
    description: timestamp, specifying when the course ends
  - name: courserun_enrollment_start_on
    description: timestamp, specifying when enrollment starts
  - name: courserun_enrollment_end_on
    description: timestamp, specifying when enrollment ends
  - name: courserun_expired_on
    description: timestamp, specifying the date time beyond which users should not
      see link to this course run on their dashboard
  - name: courserun_created_on
    description: timestamp, specifying when a course run was initially created
  - name: courserun_updated_on
    description: timestamp, specifying when a course run was most recently updated
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "courserun_tag"]

- name: stg__mitxpro__app__postgres__courses_coursetopic
  columns:
  - name: coursetopic_id
    description: int, primary key representing a single MITxPro course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_created_on
    description: timestamp, specifying when a course topic was initially created
  - name: coursetopic_updated_on
    description: timestamp, specifying when a course topic was most recently updated
  - name: coursetopic_parent_coursetopic_id
    description: int, id for the parent coursetopic for subtopics. For example 'Technology'
      is the parent topic for 'Technology:Data Science'

- name: stg__mitxpro__app__postgres__courses_courserungrade
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MIT xPro grade record
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
  - name: courserungrade_is_set_by_admin
    description: boolean, indicating whether this grade is set by a staff user
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
  - name: courserungrade_created_on
    description: timestamp, specifying when a grade was initially created
  - name: courserungrade_updated_on
    description: timestamp, specifying when a grade was most recently updated
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__courses_courseruncertificate
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MIT xPro course certificate
      record
    tests:
    - unique
    - not_null
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: courseruncertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: courseruncertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxpro__app__postgres__courses_programcertificate
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MIT xPro program certificate
      record
    tests:
    - unique
    - not_null
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__courses_program')
        field: program_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxpro__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: programcertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: programcertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id"]
- name: stg__mitxpro__app__postgres__courses_courserunenrollment
  columns:
  - name: courserunenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - unique
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: courserunenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - not_null
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'unenrolled', 'enrolled'
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - not_null
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - not_null
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id", "ecommerce_order_id"]

- name: stg__mitxpro__app__postgres__courses_programenrollment
  columns:
  - name: programenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - unique
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: programenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - not_null
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - not_null
  - name: program_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - not_null
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id", "ecommerce_order_id"]

- name: stg__mitxpro__openedx__tracking_logs__user_activity
  description: This table is deduped as raw table has duplicate events. It filters
    out blank username events since these don't supply user identifiers and also those
    server "exception" events due to server errors
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, reference user id in auth_user from open edX. Extracted from
      context field.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course number}+{run_tag}.
      Extracted from various fields - context.course_id, context.path, event_type
      and page. The course ID extracted from context field may not be valid, it would
      require joining with courserun table to be sure. This field could be blank for
      any events that are not for any specific course .e.g. user login/out, visiting
      dashboard, some course team events e.g. course export from studio
  - name: org_id
    description: str, reference name in organizations_organization from open edX.
      e.g. xPRO . Extracted from context field
  - name: useractivity_path
    description: str, URL that generated this event. Extracted from context field
  - name: useractivity_context_object
    description: object, it includes member fields that provide contextual information.
      Common fields apply to all events are course_id, org_id, path, user_id. Other
      member fields for applicable events are course_user_tags, module.
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The values are - browser, mobile, server, task
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, type of event triggered. Values depend on event_source.
    tests:
    - not_null
  - name: useractivity_event_name
    description: str, type of event triggered. When this field is present for an event,
      it supersedes the event_type field.
  - name: useractivity_event_object
    description: object,it includes member fields that identify specifics of each
      triggered event. Different member fields are supplied for different events.
    tests:
    - not_null
  - name: useractivity_page_url
    description: str, url of the page the user was visiting when the event was emitted.
  - name: useractivity_session_id
    description: str, 32-character value to identify the user’s session. All browser
      events and the server 'enrollment' events include session value. Other server
      events and mobile events do not include a session value.
  - name: useractivity_ip
    description: str, IP address of the user who triggered the event. Empty for mobile
      events.
  - name: useractivity_http_host
    description: str, The site visited by the user. e.g. courses.xpro.mit.edu
    tests:
    - not_null
  - name: useractivity_http_user_agent
    description: str, browser agent string of the user who triggered the event.
  - name: useractivity_http_accept_language
    description: str, value from the HTTP Accept-Language request-header field
  - name: useractivity_http_referer
    description: str, URI from the HTTP Referer request-header field
  - name: useractivity_timestamp
    description: timestamp, time at which the event was emitted, formatted as ISO
      8601 string
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "useractivity_context_object", "useractivity_event_source",
        "useractivity_event_type", "useractivity_event_object", "useractivity_timestamp"]
- name: stg__mitxpro__app__postgres__cms_certificatepage
  columns:
  - name: wagtail_page_id
    description: int, wagtail_page record corresponding to the certificate page
    tests:
    - not_null
    - unique
  - name: cms_certificate_product_name
    description: str, name of product associated with the certificate
    tests:
    - not_null
  - name: cms_certificate_ceus
    description: str, number continuing education units that are earned with the certificate.
      Text input that is generally a number
  - name: cms_certificate_signitory_ids
    description: Array, Array of int of wagtail_page_ids associated with cms_signatory
      records
  - name: cms_certificate_overrides
    description: json,Overrides for cms_certificate_page field for specific program/course
      runs. specific program/course runs.
  - name: cms_certificate_institute_text
    description: str, text of certificate issuing institute

- name: stg__mitxpro__app__postgres__cms_coursepage
  description: Course page records. This incudes records from both raw__xpro__app__postgres__cms_coursepage
    and raw__xpro__app__postgres__cms_externalcoursepage
  columns:
  - name: wagtail_page_id
    description: int, wagtailcore_page record corresponding to the course page
    tests:
    - not_null
    - unique
  - name: cms_coursepage_description
    description: str, the description displayed on the page
    tests:
    - not_null
  - name: course_id
    description: int, primary key for the course in the courses_course table
    tests:
    - not_null
    - unique
  - name: cms_coursepage_duration
    description: str, a short description indicating how long the course takes to
      complete (e.g. '4 weeks')
  - name: cms_coursepage_subhead
    description: str, short subheading to appear below the title on the course page
    tests:
    - not_null
  - name: cms_coursepage_time_commitment
    description: str, short description indicating about the time commitments
  - name: cms_coursepage_catalog_details
    description: str, the description shown on the catalog page for this product
    tests:
    - not_null
  - name: cms_coursepage_external_marketing_url
    description: str,  the URL of the external course web page
  - name: cms_coursepage_model
    description: str,  whether the course page record is in the cms_coursepage or
      cms_externalcoursepage table. This can not be used reliably to determine if
      the course is external
    tests:
    - not_null
    - accepted_values:
        values: ['cms_coursepage', 'cms_externalcoursepage']
- name: stg__mitxpro__app__postgres__cms_coursepage_topics
  columns:
  - name: wagtail_page_id
    description: int, wagtail_page_id of cms_coursepage associated with this topic
      course pairing
    tests:
    - not_null
  - name: coursetopic_id
    description: int, primary key in courses_coursetopic
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["wagtail_page_id", "coursetopic_id"]

- name: stg__mitxpro__app__postgres__wagtail_page
  description: There is a record in this table for each record in cms_ tables. wagtail_page_id
    refers to the primary key in this table
  columns:
  - name: wagtail_page_id
    description: int, int primary key for this table.
    tests:
    - not_null
    - unique
  - name: wagtail_page_path
    description: str, the full materialized path for each node (readonly) e.g. 0001
      is root path, 00010001 is the path to a node in this requirement tree
    tests:
    - not_null
    - unique
  - name: wagtail_page_depth
    description: int, depth of a node in the tree. A root node has a depth of 1.
    tests:
    - not_null
  - name: wagtail_page_num_children
    description: int, the number of children of a node
    tests:
    - not_null
  - name: wagtail_page_title
    description: str, human-readable title of the page
    tests:
    - not_null
  - name: wagtail_page_slug
    description: str, this is used for constructing the page’s URL.
    tests:
    - not_null
  - name: wagtail_page_is_live
    description: boolean, if set to true this page is published
    tests:
    - not_null
  - name: wagtail_page_has_unpublished_changes
    description: boolean, set to True when the page is either in draft or published
      with draft changes.
    tests:
    - not_null
  - name: wagtail_page_seo_title
    description: str, alternate SEO-crafted title, for use in the page’s <title> HTML
      tag.
    tests:
    - not_null
  - name: wagtail_page_url_path
    description: str, url path for the page
    tests:
    - not_null
  - name: wagtail_page_search_description
    description: str, SEO-crafted description of the content, used for search indexing.
      This is also suitable for the page’s <meta name="description"> HTML tag.
    tests:
    - not_null
  - name: contenttype_id
    description: int, primary key in django_contenttype. The cms_ table of that has
      data for this page
    tests:
    - not_null
  - name: owner_user_id
    description: int, primary key in users_user of the page owner
  - name: wagtail_page_latest_revision_created_on
    description: timestamp, timestamp of the page's latest revision
  - name: wagtail_page_first_published_on
    description: timestamp, timestamp when the page was first published
  - name: wagtail_page_live_pagerevision_id
    description: int, primary key in wagtailcore_pagerevision of the page's latest
      revision
  - name: wagtail_page_last_published_on
    description: timestamp, timestamp when the page was last published

- name: stg__mitxpro__app__postgres__wagtail_pagerevision
  description: There is a record in this table for each revision of a wagtail page
  columns:
  - name: wagtail_pagerevision_id
    description: int, int primary key for this table.
    tests:
    - not_null
    - unique
  - name: wagtail_pagerevision_created_on
    description: timestamp, timestamp when the revision was created
    tests:
    - not_null
  - name: wagtail_pagerevision_content_json
    description: json, json of the page data
    tests:
    - not_null
  - name: wagtail_page_id
    description: int, primary key in wagtail_page
    tests:
    - not_null
  - name: user_id
    description: int, primary key in users_user of the author


- name: stg__mitxpro__app__postgres__cms_programpage
  description: Program page records. This incudes records from both raw__xpro__app__postgres__cms_programpage
    and raw__xpro__app__postgres__cms_externalprogrampage
  columns:
  - name: wagtail_page_id
    description: int, wagtailcore_page record corresponding to the program page
    tests:
    - not_null
    - unique
  - name: cms_programpage_description
    description: str, the description displayed on the page
    tests:
    - not_null
  - name: program_id
    description: int, primary key for the program in the courses_program table
    tests:
    - not_null
    - unique
  - name: cms_programpage_duration
    description: str, a short description indicating how long the program takes to
      complete (e.g. '4 weeks')
  - name: cms_programpage_subhead
    description: str, short subheading to appear below the title on the program page
    tests:
    - not_null
  - name: cms_programpage_time_commitment
    description: str, short description indicating about the time commitments
  - name: cms_programpage_catalog_details
    description: str, the description shown on the catalog page for this product
    tests:
    - not_null
  - name: cms_programpage_external_marketing_url
    description: str,  the URL of the external program web page
  - name: cms_programpage_is_featured
    description: bool, whether the program is featured
  - name: cms_programpage_model
    description: str,  whether the program page record is in the cms_programpage or
      cms_externalprogramepage table. This can not be used reliably to determine if
      the program is external
    tests:
    - not_null
    - accepted_values:
        values: ['cms_programpage', 'cms_externalprogrampage']
- name: stg__mitxpro__app__postgres__cms_coursesinprogrampage
  description: This table contains 1) Lists of courses in programs 2) Additional lists
    - for example upcoming courses and programs The type of list can be determined
    by the parent page of the record using  wagtail_page_path in the wagtail_page
    table
  columns:
  - name: wagtail_page_id
    description: int, wagtailcore_page record corresponding to the courses in program
      page
    tests:
    - not_null
    - unique
  - name: cms_coursesinprogrampage_heading
    description: str, the heading displayed on the page
    tests:
    - not_null
  - name: cms_coursesinprogrampage_body
    description: str, the body displayed on the page
  - name: cms_coursesinprogrampage_coursepage_wagtail_page_ids
    description: array of int,  json, with the wagtail_page_ids of cms_coursepage,
      cms_externalcoursepage , cms_programpage, cms_externalprogrampage
    tests:
    - not_null
- name: stg__mitxpro__app__postgres__cms_signatorypage
  description: This table contains signatories for certificates
  columns:
  - name: wagtail_page_id
    description: int, wagtailcore_page record corresponding to the signatory page
    tests:
    - not_null
    - unique
  - name: cms_signatorypage_name
    description: str, name
    tests:
    - not_null
  - name: cms_signatorypage_title_1
    description: str, the certifate signatory title
  - name: cms_signatorypage_title_2
    description: str, the certifate signatory title
  - name: cms_signatorypage_organization
    description: str, organization text


- name: stg__mitxpro__app__postgres__cms_facultymemberspage
  description: This table contains the faculty for a course
  columns:
  - name: wagtail_page_id
    description: int, wagtailcore_page record corresponding to the faculty page
    tests:
    - not_null
    - unique
  - name: cms_facultymemberspage_heading
    description: str, heading for the page
    tests:
    - not_null
  - name: cms_facultymemberspage_subhead
    description: str, tsubheading for the page
  - name: cms_facultymemberspage_faculty
    description: json, json of the course or program faculty, contains name and description
    tests:
    - not_null

- name: stg__mitxpro__openedx__mysql__auth_user
  description: xPro open edX users
  columns:
  - name: openedx_user_id
    description: int, sequential ID representing a user on xPro open edX platform
    tests:
    - unique
    - not_null
  - name: user_username
    description: str, unique username on the open edX platform
    tests:
    - unique
    - not_null
  - name: user_email
    description: str, user's email associated with their account
    tests:
    - unique
    - not_null
  - name: user_is_active
    description: boolean, used to soft delete users
    tests:
    - not_null
  - name: user_is_staff
    description: boolean, indicating whether user can log into admin site
    tests:
    - not_null
  - name: user_is_superuser
    description: boolean, indicating whether user has all permissions on open edx
      platform
    tests:
    - not_null
