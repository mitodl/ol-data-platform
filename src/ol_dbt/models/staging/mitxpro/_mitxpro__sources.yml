---
version: 2

sources:
- name: ol_warehouse_raw_data
  loader: airbyte
  database: 'ol_data_lake_{{ target.name }}'
  schema: 'ol_warehouse_{{ target.name }}_raw'
  tables:
  - name: raw__xpro__app__postgres__ecommerce_productcouponassignment
    description: Coupon assignments made through bulk coupon assignment google sheets.
      These coupons can be redeemed by users with a specific email for a specific
      product
    columns:
    - name: id
      description: int, primary key representing a coupon assignment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon assignment was created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the  coupon assignment was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: email
      description: string, user email that can redeem the coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: product_coupon_id
      description: int, foreign key to ecommerce_couponeligibility, which has a coupon
        and product pair
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: redeemed
      description: boolean, whether the user redeemed the coupon to enroll in the
        course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: bulk_assignment_id
      description: int, foreign key to ecommerce_bulkcouponassignment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: message_status
      description: string, email message status. One of  "delivered", "failed", "opened",
        "clicked"
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: message_status_date
      description: timestamp, timestamp when the message status was last updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: original_email
      description: string, original email for the record, used when the email for
        a coupon needs to change
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 10
  - name: raw__xpro__app__postgres__ecommerce_bulkcouponassignment
    description: xPro has functionality for companies to assign coupons codes ( full
      price vouchers) to employees through a google drive sheet. People that get a
      coupon recieve an email with their coupon code and enrollment instructions.
      This table controls that functionality.
    columns:
    - name: id
      description: int, primary key representing a bulk coupon assignment sheet
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the bulk coupon assignment sheet record
        was created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the bulk coupon assignment sheet record
        was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: assignment_sheet_id
      description: string, google drive id for the sheet used to make the assignments
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: assignments_started_date
      description: timestamp, timestamp when we started assigning coupons and sending
        emails to the email addresses in the sheet
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: message_delivery_completed_date
      description: timestamp, timestamp when all the emails with enrollment coupons
        have been sent
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: sheet_last_modified_date
      description: timestamp, timestamp when the google spreadsheet used for coupon
        assignments was last modified
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: last_assignment_date
      description: timestamp, timestamp when a coupon was last assigned to a user
        on the list
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8
  - name: raw__xpro__app__postgres__ecommerce_couponselection
    description: A row in this table is added when a coupon code is added to the users
      basket for a course or product they have not yet purchased
    columns:
    - name: id
      description: int, primary key representing a coupon selection
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon was added to the basket
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon selection was updated most
        recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_id
      description: int, foreign key for ecommerce_coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: basket_id
      description: int, foreign key for ecommerce_basket
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_couponredemption
    description: A row in this table is added when an order uses a coupon code
    columns:
    - name: id
      description: int, primary key representing a coupon redemption
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon was redeemed
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon redemption was updated most
        recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_version_id
      description: int, foreign key for ecommerce_couponversion
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, foreign key for ecommerce_order
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_couponeligibility
    description: This table is used to limit coupons to a specific product. Coupons
      which do not have a record in this table are redeemable for all products
    columns:
    - name: id
      description: int, primary key representing a coupon product combo
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon product association was initially
        created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon product association was most
        recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_id
      description: int, foreign key for ecommerce_coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: product_id
      description: int, foreign key for ecommerce_product
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_run_id
      description: int, foreign key for courses_programrun, may be set when the product
        type is a program
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 6
  - name: raw__xpro__app__postgres__ecommerce_company
    description: A company that purchases bulk enrollments to xpro courses or programs
    columns:
    - name: id
      description: int, primary key representing a company
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the company record was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the company record was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: name
      description: string, company name
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 4
  - name: raw__xpro__app__postgres__ecommerce_couponpaymentversion
    description: The ecommerce_couponpaymentversion holds information about a batch
      of coupons. A coupon payment version has information about the dollar or percentage
      amount of the discount, the number of available coupons that can be used to
      redeem the discount, how many times they can be redeemed and the source of the
      coupons. Coupon groups can be generated internally, for example to allow staff
      to enroll in courses without paying or marketing to create promos that allow
      learners to take a percentage or dollar amount off the full course price. Other
      coupon groups are created when a company buys bulk seats in a course for their
      employees, which generates a batch of 100% off coupons that learners can use
      to enroll in a course or program.
    columns:
    - name: id
      description: int, primary key representing a coupon payment version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon payment version was initially
        created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon paymemt  version was most
        recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_type
      description: string, one of 'single-use' or 'promo'.
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: num_coupon_codes
      description: int, number of coupon (and coupon version) objects associated with
        the payment version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: max_redemptions
      description: int, maximum number of redemptions for the coupon payment version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: max_redemptions_per_user
      description: int, maximum number of redemptions per user for the coupon payment
        version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: amount
      description: number, either dollar amount or percentage (between 0 and 1) discount
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: expiration_date
      description: timestamp, expiration timestamp for the coupon payment version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: activation_date
      description: timestamp, activation timestamp for the coupon payment version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: automatic
      description: boolean, whether the coupon should be automatically applied to
        eligible orders
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: payment_type
      description: string, one of "credit_card", "purchase_order", "marketing, "sales",
        "staff". "staff" coupons are used to allow staff to enroll in courses. "marketing"
        coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
        and "sales" correspond to different ways that companies can pay for vouchers
        for their employees to enroll in courses or programs
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: payment_transaction
      description: string, string that identifies the payment invoice for coupon purchases
        by companies
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: tag
      description: string, optional string tag used to identify the coupon payment
        version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: company_id
      description: foreign key is ecommerce_company
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: payment_id
      description: int, foreign key to ecommerce_couponpayment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: discount_type
      description: one of percent-off or dollars-off
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 17
  - name: raw__xpro__app__postgres__ecommerce_couponpayment
    description: Most of the information for coupon payments is in couponpaymentversion
    columns:
    - name: id
      description: int, primary key representing a coupon payment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon payment was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon paymemt was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: name
      description: string, human readable name for the coupon payment
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 4
  - name: raw__xpro__app__postgres__ecommerce_couponversion
    description: A version of a coupon linked to a specific couponpaymentversion record
    columns:
    - name: id
      description: int, primary key representing a coupon version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon version was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon version was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_id
      description: int, foreign key referencing ecommerce_coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: payment_version_id
      description: int, foreign key to ecommerce_paymentversion
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_coupon
    description: A coupon code that can be used to recieve a discount on a course
      or program
    columns:
    - name: id
      description: int, primary key representing a coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the coupon was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the coupon was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coupon_code
      description: string, coupon code for the coupon
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: payment_id
      description: int, foreign key to ecommerce_payment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: enabled
      description: boolean, whethere or not the coupon is currently active
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: include_future_runs
      description: boolean, if true the coupon is automatically enabled for future
        runs of the product the coupon is associated with
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_global
      description: boolean, if true the coupon is valid for all products
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8
  - name: raw__xpro__app__postgres__ecommerce_orderaudit
    columns:
    - name: id
      description: int, primary key representing a change to the orders table
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the order audit was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the order audit was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: data_before
      description: json, jsonified order object before the change
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: data_after
      description: json, jsonified order object after the change
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: acting_user_id
      description: int, reference to users_user table, the user who made the change
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, reference to ecommerce_order
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 7
  - name: raw__xpro__app__postgres__ecommerce_courserunselection
    description: The course runs the user selected for the basket items in their basket.
      If the basket item is a course run, there is one ecommerce_courserunselection
      record. If the basket item  is a program, there will be a record for each course
      run from the program that is selected by the user. Once the user completes the
      purchase, these records become records in ecommerce_linerunselection
    columns:
    - name: id
      description: int, primary key representing a basket course run selection
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the basket course run selection was
        initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the basket course run selection was
        most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: run_id
      description: int, primary key in courses_courserun
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: basket_id
      description: int, primary key in ecommerce_basket
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_basketitem
    description: The ecommerce_products that the user has in their basket but has
      not purchased yet
    columns:
    - name: id
      description: int, primary key representing a item in a user's basket
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the basket item was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the basket item was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: quantity
      description: int, quantitiy of the item. Always 1
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: basket_id
      description: int, foreign key referencing ecommerce_basket
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: product_id
      description: int, foreign key referencing ecommerce_product
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_run_id
      description: int, foreign key referencing courses_programrun, present if the
        product is a program
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 7
  - name: raw__xpro__app__postgres__ecommerce_basket
    columns:
    - name: id
      description: int, primary key representing a user basket
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the basket was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the basket was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: int, foreign key to the users_user table
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 4
  - name: raw__xpro__app__postgres__ecommerce_receipt
    description: Data returned from cybersource when a user pays for an order
    columns:
    - name: id
      description: int, primary key representing a receipt
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the receipt was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the receipt most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: data
      description: json, cybersource data for a payment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, primary key in ecommerce_order
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_programrunline
    description: The program run the user selected when purchsing a program.
    columns:
    - name: id
      description: int, primary key representing a line program run selection
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the line program run selection was initially
        created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the line program run selection was most
        recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_run_id
      description: int, primary key in courses_programrun
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: line_id
      description: int, primary key in ecommerce_line
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__ecommerce_linerunselection
    description: The course runs the user selected when purchsing the courseware object.
      If the courseware object is a course run, there is one ecommerce_line_run_selection
      record. If the courseware object is a program, there will be a record for each
      course run from the program that is selected by the user
    columns:
    - name: id
      description: int, primary key representing a line run selection
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the line run selection was initially
        created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the line run selection was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: run_id
      description: int, primary key in courses_courserun
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: line_id
      description: int, primary key in ecommerce_line
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 5
  - name: raw__xpro__app__postgres__django_content_type
    columns:
    - name: id
      description: int, sequential ID for the django model
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: model
      description: string, the name of the django model
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: app_label
      description: string, the  functional group the model belongs to
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 3
  - name: raw__xpro__app__postgres__ecommerce_product
    columns:
    - name: id
      description: int, primary key representing an ecommerce product
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the product was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the product was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: content_type_id
      description: int, primary key in django_contenttype of the courseware. It is
        the key for courses_courserun or courses_program in production. There is a
        record where the courseware is courses_course on rc
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: object_id
      description: int, primary key in either courses_courserun or courses_program
        table of the courseware
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_active
      description: boolean, whether or not the product is currently purchasable
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: visible_in_bulk_form
      description: boolean, whether or not the product is purchasable through the
        bulk form at /ecommerce/bulk
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 7
  - name: raw__xpro__app__postgres__ecommerce_productversion
    columns:
    - name: id
      description: int, primary key representing an ecommerce product version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the product version was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the product version was most recently
        updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: price
      description: numeric, the product price for this version
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: description
      description: string, product version discriptiom
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: product_id
      description: int, primary key in ecommerce_product
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: text_id
      description: string, the readable_id field from the product object
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: requires_enrollment_code
      description: boolean, true if the learner is required to enter an enrollment
        code to enroll in the course or program at the checkout
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8
  - name: raw__xpro__app__postgres__ecommerce_line
    columns:
    - name: id
      description: int, primary key representing an ecommerce line
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the line was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the line was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: quantity
      description: int, quantitiy ordered, currently always 1
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, foreign key in the orders_order table for the order that contains
        the line
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: product_version_id
      description: int stored as string, foreign key in the ecommerce_productversion
        table. Versioned product
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 6
  - name: raw__xpro__app__postgres__ecommerce_order
    columns:
    - name: id
      description: int, primary key representing a single xpro order
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the order was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the order was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: status
      description: string, order state. Options are "fulfilled", "failed", "created"
        "refunded"
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: total_price_paid
      description: number, total order amount
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: purchaser_id
      description: int, primary key in users_user for the purchaser
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 6
  - name: raw__xpro__app__postgres__courses_courserunenrollment
    columns:
    - name: id
      description: int, sequential ID tracking a single user enrollment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when an enrollment was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when an enrollment was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: change_status
      description: str, enrollment status for users whose enrollment is no longer
        active. Options are 'deferred', 'transferred', 'refunded', 'unenrolled'
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: active
      description: boolean, indicating whether the user is still enrolled in the run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: edx_enrolled
      description: boolean, indicating whether the user is enrolled on edx
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: run_id
      description: int, unique ID specifying a "run" of an xPro course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: int, unique ID for each user on the xPro platform
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, id of order associated with the payment for the enrollment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: company_id
      description: int, id of the company associated with the payment for the enrollment
        for enrollments that are made through bulk purchases by companies
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 10
  - name: raw__xpro__app__postgres__courses_programenrollment
    columns:
    - name: id
      description: int, sequential ID tracking a single user enrollment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when an enrollment was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when an enrollment was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: change_status
      description: str, enrollment status for users whose enrollment is no longer
        active. Options are 'deferred', 'transferred', 'refunded', 'unenrolled'
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: active
      description: boolean, indicating whether the user is still enrolled in the program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_id
      description: int, foreign key from the courses_program table
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: int, unique ID for each user on the xPro platform
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: order_id
      description: int, id of order associated with the payment for the enrollment
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: company_id
      description: int, id of the company associated with the payment for the enrollment
        for enrollments that are made through bulk purchases by companies
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 9
  - name: raw__xpro__app__postgres__courses_program
    columns:
    - name: id
      description: int, primary key representing a single MITxPro program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: live
      description: boolean, indicating whether the program is available to users on
        MITxPro website
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: title
      description: str, title of the program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: readable_id
      description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
        program-v1:xPRO+MLx
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a program was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a program was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 6

  - name: raw__xpro__app__postgres__courses_programrun
    columns:
    - name: id
      description: int, primary key representing a single MITxPro program run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_id
      description: int, foreign key to courses_program representing a single MITxPro
        program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: run_tag
      description: str, string that identifies a single run for a program e.g. R0
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: start_date
      description: timestamp, specifying when the program run begins
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: end_date
      description: timestamp, specifying when the program run ends
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the program run was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the program run was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 7

  - name: raw__xpro__app__postgres__courses_course
    description: Source table for MITxPro courses
    columns:
    - name: id
      description: int, primary key representing a single MITxPro course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: live
      description: boolean, indicating whether the course is available to users on
        MITxPro website
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: title
      description: str, title of the course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_id
      description: id, foreign key to courses_program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: readable_id
      description: str, Open edX ID formatted as course-v1:{org}+{course code} e.g.
        course-v1:xPRO+MLx2
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: position_in_program
      description: int, sequential number indicating the course display order in a
        program on MITxPro website
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a course was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a course was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8

  - name: raw__xpro__app__postgres__courses_courserun
    description: Source table for MITxPro course runs
    columns:
    - name: id
      description: int, primary key representing a single MITxPro course run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: live
      description: boolean, indicating whether the course run is available to users
        on MITxPro website
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: title
      description: str, title of the course run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: run_tag
      description: str,string that identifies a single run for a course e.g. R0
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: course_id
      description: int, foreign key to courses_course representing a single MITxPro
        course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: courseware_id
      description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
        e.g. course-v1:xPRO+MLx1+R0
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: courseware_url_path
      description: str, url location for the course run on MITxPro website
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: start_date
      description: timestamp, specifying when the course begins
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: end_date
      description: timestamp, specifying when the course ends
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: enrollment_start
      description: timestamp, specifying when enrollment starts
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: enrollment_end
      description: timestamp, specifying when enrollment ends
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: expiration_date
      description: timestamp, specifying the date time beyond which users should not
        see link to this course run on their dashboard
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a course run was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a course run was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 14

  - name: raw__xpro__app__postgres__courses_courserungrade
    columns:
    - name: id
      description: int, primary key representing a single MIT xPro grade record
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: course_run_id
      description: int, foreign key to courses_courserun representing a single course
        run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: str, foreign key to users_user representing a single user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: grade
      description: float, user's grade for the course (range between 0.0 to 1.0)
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: letter_grade
      description: str, letter grade defined ib edX grading policy (value may be 'A',
        'B', 'C', 'D', 'Pass', none)
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: set_by_admin
      description: boolean, indicating whether this grade is set by a staff user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: passed
      description: boolean, indicating whether the user has passed the minimum passing
        score set for this course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a grade was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a grade was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 9

  - name: raw__xpro__app__postgres__courses_courseruncertificate
    columns:
    - name: id
      description: int, primary key representing a single MIT xPro course certificate
        record
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: uuid
      description: str, unique identifier for the certificate
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: course_run_id
      description: int, foreign key to courses_courserun representing a single course
        run
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: str, foreign key to users_user representing a single user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: certificate_page_revision_id
      description: int, foreign key to wagtailcore_pagerevision (could be blank)
    - name: created_on
      description: timestamp, specifying when a certificate was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a certificate was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_revoked
      description: boolean, indicating whether the certificate is revoked and invalid
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8

  - name: raw__xpro__app__postgres__courses_programcertificate
    columns:
    - name: id
      description: int, primary key representing a single MIT xPro program certificate
        record
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: uuid
      description: str, unique identifier for the program certificate
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: program_id
      description: int, foreign key to courses_program representing a single program
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: str, foreign key to users_user representing a single user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: certificate_page_revision_id
      description: int, foreign key to wagtailcore_pagerevision (could be blank)
    - name: created_on
      description: timestamp, specifying when a certificate was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a certificate was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_revoked
      description: boolean, indicating whether the certificate is revoked and invalid
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 8

  - name: raw__xpro__app__postgres__courses_coursetopic
    columns:
    - name: id
      description: int, primary key representing a single MITxPro course topic
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: name
      description: str, name of a course topic
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a course topic was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a course topic was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 4

  - name: raw__xpro__app__postgres__courses_course_topics
    columns:
    - name: id
      description: int, primary key representing a single MITxPro course tagged to
        a topic
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: course_id
      description: int, foreign key to courses_course representing a single course
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: coursetopic_id
      description: int, foreign key to courses_coursetopic representing a single course
        topic
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 3

  - name: raw__xpro__app__postgres__users_user
    columns:
    - name: id
      description: int, sequential ID representing one user in xPro
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: password
      description: str, hashed password
    - name: username
      description: str, name chosen by user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: email
      description: str, user email associated with their account
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: name
      description: str, the user's full name
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_active
      description: boolean, used to soft delete users
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when a user account was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when a user account was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: last_login
      description: timestamp, user's last login
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_staff
      description: boolean, used for app permissions
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: is_superuser
      description: boolean, used for app permissions
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 11
  - name: raw__xpro__app__postgres__users_legaladdress
    columns:
    - name: id
      description: int, primary key for table
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: country
      description: string, user country code
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: int, foreign key to users_user
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: last_name
      description: string, user last name
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, when the record was created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: first_name
      description: string, user first name
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, when the record was updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: street_address_1
      description: string, first line of street address
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: street_address_2
      description: string, second line of street address
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: street_address_3
      description: string, third line of street address
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: street_address_4
      description: string, fourth line of street address
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: street_address_5
      description: string, fifth line of street address
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: city
      description: string, city
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: state_or_territory
      description: string, state or territory
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: postal_code
      description: string, postal code
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 15
  - name: raw__xpro__app__postgres__users_profile
    columns:
    - name: id
      description: int, sequential ID
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: created_on
      description: timestamp, specifying when the row was initially created
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: updated_on
      description: timestamp, specifying when the row was most recently updated
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: gender
      description: str, one of  "m", "f" or "o" to encode "Male" , "Female", "Other/Prefer
        not to say". May be blank
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: birth_year
      description: int, user birth year
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: company
      description: str, user company
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: job_title
      description: str, user job title
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: industry
      description: str, user job industry
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: job_function
      description: str, user job function
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: company_size
      description: int, encodes company size choices are 1 - "Small/Start-up (1+ employees)",
        9 - "Small/Home office (1-9 employees)", 99 - "Small (10-99 employees)", 999
        - "Small to medium-sized (100-999 employees)", 9999 - "Medium-sized (1000-9999
        employees)", 10000 - "Large Enterprise (10,000+ employees)", 0 - "Other (N/A
        or Don't know)" may be null
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: years_experience
      description: int, encodes user years experience choices are; 2 - "Less than
        2 years", 5 - "2-5 years", 10 - "6 - 10 years", 15 - "11 - 15 years", 20 -
        "16 - 20 years", 21 - "More than 20 years", 0 - "Prefer not to say", may be
        null
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: leadership_level
      description: str, user leadership level
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: user_id
      description: int, unique ID for each user on the xPro platform
      tests:
      - dbt_expectations.expect_column_to_exist
    - name: highest_education
      description: str, choices are "Doctorate", "Master's or professional degree",
        "Bachelor's degree", "Associate degree", "Secondary/high school", "Junior
        secondary/junior high/middle school", "Elementary/primary school", "No formal
        education", "Other education"
      tests:
      - dbt_expectations.expect_column_to_exist
    tests:
    - dbt_expectations.expect_table_column_count_to_equal:
        value: 14
