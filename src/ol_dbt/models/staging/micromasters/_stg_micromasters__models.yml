---
version: 2

models:
- name: stg__micromasters__app__postgres__ecommerce_redeemedcoupon
  columns:
  - name: redeemedcoupon_id
    description: int, primary key representing a discount redemption
    tests:
    - unique
    - not_null
  - name: redeemedcoupon_created_on
    description: timestamp, specifying when the coupon was redeemed
    tests:
    - not_null
  - name: redeemedcoupon_updated_on
    description: timestamp, specifying when the coupon redemption was last updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
  - name: order_id
    description: int, foreign key for ecommerce_orders
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["order_id", "coupon_id"]

- name: stg__micromasters__app__postgres__ecommerce_receipt
  description: Data returned from cybersource when a user pays for an order
  columns:
  - name: receipt_id
    description: int, primary key representing a receipt
    tests:
    - unique
    - not_null
  - name: receipt_created_on
    description: timestamp, specifying when the receipt was initially created
    tests:
    - not_null
  - name: receipt_updated_on
    description: timestamp, specifying when the receipt was most recently updated
    tests:
    - not_null
  - name: receipt_data
    description: json, cybersource data for a payment
    tests:
    - not_null
  - name: order_id
    description: int, primary key in ecommerce_order
- name: stg__micromasters__app__postgres__ecommerce_line
  columns:
  - name: line_id
    tests:
    - unique
    - not_null
    description: int, primary key representing an ecommerce line
  - name: line_created_on
    description: timestamp, specifying when the line was initially created
    tests:
    - not_null
  - name: line_updated_on
    description: timestamp, specifying when the line was most recently updated
    tests:
    - not_null
  - name: courserun_edx_readable_id
    description: string, edx_course_key from courses_courserun
    tests:
    - not_null
  - name: line_price
    description: numeric, price paid for the course run
    tests:
    - not_null
  - name: order_id
    description: int, foreign key in the orders_order table for the order that contains
      the line. Orders have exactly one line
    tests:
    - not_null
  - name: line_description
    description: string, description of the course run being purchased
- name: stg__micromasters__app__postgres__ecommerce_order
  columns:
  - name: order_id
    description: int, primary key representing a single  order
    tests:
    - unique
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was initially created
    tests:
    - not_null
  - name: order_updated_on
    description: timestamp, specifying when the order was most recently updated
    tests:
    - not_null
  - name: order_state
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded", "partially_refunded"
    tests:
    - not_null
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - not_null
  - name: user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - not_null
  - name: order_reference_number
    description: string, readable id for the order
    tests:
    - unique

- name: stg__micromasters__app__postgres__ecommerce_usercoupon
  columns:
  - name: usercoupon_id
    description: int, primary key representing a coupon user combo
    tests:
    - unique
    - not_null
  - name: usercoupon_created_on
    description: timestamp, specifying when the coupon user association was initially
      created
    tests:
    - not_null
  - name: usercoupon_updated_on
    description: timestamp, specifying when the coupon user association was most recently
      updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
  - name: user_id
    description: int, foreign key for users_user
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "coupon_id"]

- name: stg__micromasters__app__postgres__ecommerce_couponinvoice
  description: the ecommerce_couponinvoice table is used to identify batches of coupons
    that a created togather for the same purpose
  columns:
  - name: couponinvoice_id
    description: int, primary key representing a coupon invoice
    tests:
    - unique
    - not_null
  - name: couponinvoice_number
    description: string, short string used to identify a batch of coupons
  - name: couponinvoice_description
    description: string, description for a batch of coupons

- name: stg__micromasters__app__postgres__ecommerce_coupon
  columns:
  - name: coupon_id
    description: int, primary key representing a coupon
    tests:
    - unique
    - not_null
  - name: coupon_created_on
    description: timestamp, specifying when the coupon was initially created
    tests:
    - not_null
  - name: coupon_updated_on
    description: timestamp, specifying when the coupon was most recently updated
    tests:
    - not_null
  - name: coupon_code
    description: string, coupon code
  - name: coupon_object_id
    description: int, id in either coures_course or courses_program for the course
      entity for which the coupon can be redeemed
    tests:
    - not_null
  - name: coupon_amount_type
    description: string, type of coupon discount and meaning of the "amount" column.
      May be "fixed-discount" "fixed-price" or "percent-discount"
    tests:
    - not_null
    - accepted_values:
        values: ['fixed-discount', 'fixed-price', 'percent-discount']
  - name: coupon_amount
    description: numeric, discount amount. May be a precent or dollar amount
    tests:
    - not_null
  - name: coupon_activated_on
    description: timestamp, specifying when the discount is activated
  - name: coupon_expires_on
    description: timestamp, specifying when the discount is deactivated
  - name: coupon_is_active
    description: boolean, wheter the coupon is currently redeemable
    tests:
    - not_null
  - name: contenttype_id
    description: int, id in django_contenttype for eather a course or a program, depending
      on what the coupon can be redeemed for
  - name: couponinvoice_id
    description: int, foreign key in ecommerce_couponinvoice, which contains information
      about why the a batch of coupons was created
- name: stg__micromasters__app__postgres__django_contenttype
  columns:
  - name: contenttype_id
    description: int, sequential ID for the django model
    tests:
    - unique
    - not_null
  - name: contenttype_full_name
    description: string, name for django model. A combination of the models name and
      functional group
    tests:
    - unique
    - not_null

- name: stg__micromasters__app__user_program_certificate_override_list
  description: Certain users should recieve a certificate even though they do not
    meet all the program certificate requirements. This list has the user_id on user_edxorg
    and the program_id on micromasters production for those users
  columns:
  - name: user_edxorg_id
    description: int, edxorg id for a user
    tests:
    - not_null
  - name: micromasters_program_id
    description: int, foreign key in courses_program for the program the user should
      recieve a certificate
    tests:
    - not_null

- name: stg__micromasters__app__postgres__grades_programcertificate
  columns:
  - name: programcertificate_id
    description: int, sequential ID representing a program certificate. Only has records
      for DEDP
    tests:
    - unique
    - not_null
  - name: programcertificate_created_on
    description: timestamp, specifying when a program certificate was initially created
    tests:
    - not_null
  - name: programcertificate_updated_on
    description: timestamp, specifying when a program certificate was most recently
      updated
    tests:
    - not_null
  - name: programcertificate_hash
    description: str, unique hash used to identify the program certificate
    tests:
    - not_null
  - name: program_id
    description: id, int foreign key referece to courses_program
    tests:
    - not_null
  - name: user_id
    description: int, foreign key referece to auth_user
    tests:
    - not_null

- name: stg__micromasters__app__postgres__grades_coursecertificate
  description: DEDP course certificates stored in MicroMasters database
  columns:
  - name: coursecertificate_id
    description: int, sequential ID representing a DEDP course certificate
    tests:
    - unique
    - not_null
  - name: coursecertificate_hash
    description: str, unique hash used to identify this DEDP course certificate
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_course')
        field: course_id
  - name: user_id
    description: int, foreign key to auth_user
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__auth_user')
        field: user_id
  - name: coursecertificate_created_on
    description: timestamp, date and time when DEDP course certificate was initially
      created
    tests:
    - not_null
  - name: coursecertificate_updated_on
    description: timestamp, date and time when DEDP course certificate was most recently
      updated
    tests:
    - not_null

- name: stg__micromasters__app__postgres__grades_combinedcoursegrade
  description: DEDP course combined final grades stored in MicroMasters database
  columns:
  - name: coursegrade_id
    description: int, sequential ID representing a combined grade for DEDP course
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_course')
        field: course_id
  - name: user_id
    description: int, foreign key to auth_user
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__auth_user')
        field: user_id
  - name: coursegrade_grade
    description: float, calculated course grade, combined from course run and proctored
      exam using formula - course run grade * 0.4 + exam grade * 0.6, range between
      0.0 to 100.0
    tests:
    - not_null
  - name: coursegrade_created_on
    description: timestamp, date and time when this grade was initially calculated
    tests:
    - not_null
  - name: coursegrade_updated_on
    description: timestamp, date and time when this grade was most recently updated
    tests:
    - not_null

- name: stg__micromasters__app__postgres__grades_courserungrade
  description: edx course run final grades stored in MicroMasters database
  columns:
  - name: courserungrade_id
    description: int, sequential ID representing a edx course run grade
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: int, foreign key to auth_user
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__auth_user')
        field: user_id
  - name: courserungrade_grade
    description: float, course run grade range between 0.0 to 1.0
    tests:
    - not_null
  - name: courserungrade_status
    description: str, final grade status - either pending or complete
    tests:
    - not_null
    - accepted_values:
        values: ["complete", "pending"]
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the passing score
      set for this course
  - name: courserungrade_courserun_paid_on_edx
    description: boolean, indicating if user paid on edx
    tests:
    - not_null
  - name: coursegrade_created_on
    description: timestamp, date and time when this grade was initially created
    tests:
    - not_null
  - name: coursegrade_updated_on
    description: timestamp, date and time when this grade was most recently updated
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["courserun_id", "user_id"]

- name: stg__micromasters__app__postgres__grades_proctoredexamgrade
  description: DEDP proctor exam grades stored in MicroMasters database
  columns:
  - name: proctoredexamgrade_id
    description: int, sequential ID representing a DEDP proctor exam grade
  - name: course_id
    description: int, foreign key to courses_course
  - name: user_id
    description: int, foreign key to auth_user
  - name: proctoredexamgrade_letter_grade
    description: str, letter grade indicating it's pass or fail
  - name: proctoredexamgrade_passing_score
    description: float, passing score for the course, range between 0 to 100
  - name: proctoredexamgrade_is_passing
    description: boolean, indicating whether the user has passed the passing score
      set for this course
  - name: proctoredexamgrade_percentage_grade
    description: float, user percentage grade for the course, range between 0 to 1
  - name: proctoredexamgrade_score
    description: float, user score for the course, range between 0 to 100
  - name: examrun_id
    description: int, foreign key to exams_examrun
  - name: proctoredexamgrade_exam_on
    description: timestamp, date and time for the exam
  - name: proctoredexamgrade_created_on
    description: timestamp, date and time when this grade was initially created
  - name: proctoredexamgrade_updated_on
    description: timestamp, date and time when this grade was most recently updated

- name: stg__micromasters__app__postgres__auth_user
  columns:
  - name: user_id
    description: int, sequential ID representing a user in MicroMasters
    tests:
    - unique
    - not_null
  - name: user_username
    description: str, unique string to identify user
    tests:
    - unique
    - not_null
  - name: user_email
    description: str, user email associated with user account (not unique)
    tests:
    - not_null
  - name: user_is_active
    description: boolean, indicate whether this user is active (use it to soft delete
      account)
  - name: user_joined_on
    description: timestamp, specifying when a user account was initially created
  - name: user_last_login
    description: timestamp, specifying when a user last logged in

- name: stg__micromasters__app__postgres__profiles_profile
  columns:
  - name: user_profile_id
    description: int, sequential ID representing a user profile in MicroMasters
    tests:
    - unique
    - not_null
  - name: user_id
    description: str, foreign key to auth_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__auth_user')
        field: user_id
  - name: user_full_name
    description: str, user's full name on profile
    tests:
    - not_null
  - name: user_romanized_full_name
    description: str, user's full name in roman (populated when full_name is non-romanized)
  - name: user_preferred_name
    description: str, user's Nickname / Preferred name
  - name: user_birth_date
    description: timestamp, user's date of birth
  - name: user_address_country
    description: str, country where user lives in
  - name: user_address_city
    description: str, city where user lives in
  - name: user_address_state_or_territory
    description: str,  state or territory where user lives in
  - name: user_address_postal_code
    description: str, postal code where user lives in
  - name: user_street_address
    description: str, street address where user lives in
  - name: user_highest_education
    description: str, user's level of education
    tests:
    - accepted_values:
        values: ["Doctorate", "Master''s or professional degree", "Bachelor''s degree",
          "Associate degree", "Secondary/high school", "Junior secondary/junior high/middle\
            \ school", "Elementary/primary school", "No formal education", "Other\
            \ education", "Doctorate in science or engineering", "Doctorate in another\
            \ field"]
  - name: user_gender
    description: str, user gender (could be blank)
    tests:
    - accepted_values:
        values: ['Male', 'Female', 'Other/Prefer Not to Say']
  - name: user_mail_id
    description: str, UUID generated for user profile (used in automatic/bulk emails)
    tests:
    - unique
    - not_null
  - name: user_profile_is_filled_out
    description: boolean, whether user filled out the profile
  - name: user_student_id
    description: int, incremental ID for profile, it's default to primary key
    tests:
    - unique
  - name: user_email_is_optin
    description: boolean, whether user has opted to receive email
  - name: user_profile_image
    description: str, relative url of the profile image. e.g.profile/xxxxx.jpg
  - name: user_profile_image_small
    description: str, relative url of the profile image in 64x64 pixel e.g.profile/xxxxx.jpg
  - name: user_profile_image_medium
    description: str, relative url of the profile image in 128x128 pixels e.g.profile/xxxxx_medium.jpg
  - name: user_nationality
    description: str, user's nationality (stored as country code)
  - name: user_employer
    description: str, user's employer on edx.org
  - name: user_phone_number
    description: str, user's phone number
  - name: user_job_title
    description: str, user's job title on edx.org
  - name: user_account_privacy
    description: str, whether user account is "Public to everyone" (public), "Public
      to logged in users" (public_to_mm) or "Private" (private)
    tests:
    - accepted_values:
        values: ['Public to everyone', 'Public to logged in users', 'Private']
  - name: user_preferred_language
    description: str, user's preferred language
  - name: user_mailing_address
    description: str, user's mailing address on edx.org
  - name: user_is_verified
    description: boolean, whether the user is a verified MicroMasters user (currently
      false to all users on production)
  - name: user_has_agreed_to_terms_of_service
    description: boolean, whether the user has agreed to term of service
  - name: user_language_proficiencies
    description: str, JSON string of user's language proficiencies on edx.org
  - name: user_profile_parental_consent_is_required
    description: boolean, user profile requires parental consent on edx.org
  - name: user_bio
    description: str, user's biography on edx.org
  - name: user_about_me
    description: str, about me in user profile
  - name: user_edx_name
    description: str, user's full name on edx.org
  - name: user_edx_goals
    description: str, user's personal goal on edx.org
  - name: user_profile_is_fake
    description: boolean, used for testing profiles
  - name: user_joined_on
    description: timestamp, specifying when user profile was initially created
  - name: user_profile_updated_on
    description: timestamp, specifying when a profile was most recently updated
  - name: user_first_name
    description: str, first name on user profile
  - name: user_last_name
    description: str, last name on user profile

- name: stg__micromasters__app__postgres__auth_usersocialauth
  columns:
  - name: user_auth_id
    description: int, sequential ID representing a user social auth record in MicroMasters
    tests:
    - not_null
  - name: user_id
    description: str, foreign key to auth_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__auth_user')
        field: user_id
  - name: user_auth_provider
    description: str, social auth provider. It's either "edxorg" or "mitxonline"
    tests:
    - not_null
    - accepted_values:
        values: ['edxorg', 'mitxonline']
  - name: user_username
    description: str, user name string to identify a user within a social auth provider
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "user_auth_provider"]


- name: stg__micromasters__app__postgres__courses_course
  columns:
  - name: course_id
    description: int, sequential ID representing a course in MicroMasters
    tests:
    - not_null
    - unique
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
  - name: course_edx_key
    description: str, edX key formatted as {org}+{course number}
  - name: course_number
    description: str, edX course number
  - name: program_id
    description: int, foreign key to courses_program
    tests:
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_program')
        field: program_id
  - name: course_position_in_program
    description: int, sequential number indicating the course position in a program
    tests:
    - not_null
  - name: course_description
    description: str, description of the course
  - name: course_prerequisites
    description: str, required courses as a prior condition before taking this course
  - name: course_contact_email
    description: str, email used to contact course team
  - name: course_should_display_progress
    description: boolean, indicating if "in progress" grades should be displayed for
      the course
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["program_id", "course_position_in_program"]

- name: stg__micromasters__app__postgres__courses_courserun
  columns:
  - name: courserun_id
    description: int, primary key representing a course run
    tests:
    - not_null
    - unique
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course
    tests:
    - not_null
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_course')
        field: course_id
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag},
      maybe blank
  - name: courserun_enrollment_url
    description: str, url to enroll in the course run
  - name: courserun_is_discontinued
    description: boolean, setting this to true discontinues the course run
    tests:
    - not_null
  - name: courserun_prerequisites
    description: str, prerequisites for the course
  - name: courserun_platform
    description: str, indicating the platform where this course runs on. It's either
      mitxonline or edxorg.
    tests:
    - not_null
  - name: courserun_start_on
    description: timestamp, date and time when the run begins
  - name: courserun_end_on
    description: timestamp, date and time when the run ends
  - name: courserun_enrollment_start_on
    description: timestamp, date and time when enrollment starts
  - name: courserun_enrollment_end_on
    description: timestamp, date and time when enrollment ends
  - name: courserun_grade_freeze_on
    description: timestamp, date and time when the run freeze for grade
  - name: courserun_upgrade_deadline
    description: timestamp, date and time beyond which users can not enroll in paid
      course mode

- name: stg__micromasters__app__postgres__courses_program
  columns:
  - name: program_id
    description: int, sequential ID representing a program in MicroMasters
    tests:
    - not_null
    - unique
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_description
    description: str, description of the program
  - name: program_num_required_courses
    description: int, indicating the number of required courses to earn certificate
    tests:
    - not_null
  - name: program_price
    description: numeric, price of the program
    tests:
    - not_null
  - name: program_ga_tracking_id
    description: str, a unique tracking ID provided by Google Analytics used to track
      the number of views to certain pages of MicroMasters
    tests:
    - not_null
  - name: program_is_live
    description: boolean, indicating whether program is available to users on MicroMasters
      website
    tests:
    - not_null
  - name: program_is_financial_aid_available
    description: boolean, indicating if financial aid is available for the program
    tests:
    - not_null
  - name: program_created_on
    description: timestamp, specifying when a program was initially created
  - name: program_updated_on
    description: timestamp, specifying when a program was most recently updated

- name: stg__micromasters__app__postgres__courses_electiveset
  description: This represents the elective requirements for programs
  columns:
  - name: electiveset_id
    description: int, sequential ID representing a elective requirement set for a
      program in MicroMasters
    tests:
    - not_null
    - unique
  - name: electiveset_required_number
    description: int, indicating the number of required courses from this elective
      requirement set
    tests:
    - not_null
  - name: program_id
    description: int, foreign key to courses_program
    tests:
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_program')
        field: program_id
  - name: electiveset_title
    description: str, title of the elective requirement set
    tests:
    - not_null

- name: stg__micromasters__app__postgres__courses_electiveset_to_course
  description: this links a course to a elective set for programs
  columns:
  - name: electivesettocourse_id
    description: int, sequential ID representing a course in a  set for a program
      in MicroMasters
  - name: electiveset_id
    description: int, foreign key to courses_electivesset
  - name: course_id
    description: int, foreign key to courses_course
    tests:
    - relationships:
        to: ref('stg__micromasters__app__postgres__courses_course')
        field: course_id
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "electiveset_id"]
