---
version: 2

models:
- name: stg__mitxonline__openedx__mysql__bulk_email_optout
  columns:
  - name: email_optout_id
    description: int, sequential ID tracking a email optout
    tests:
    - unique
    - not_null
  - name: openedx_user_id
    description: int, unique ID for each user on the MITx Online open edX platform
    tests:
    - not_null
  - name: courserun_readable_id
    description: string, unique ID representing a single MITx Online course run
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["openedx_user_id", "courserun_readable_id"]

- name: stg__mitxonline__app__postgres__courses_courserunenrollment
  columns:
  - name: courserunenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - unique
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: courserunenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - not_null
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment is no longer active.
      Options are 'deferred', 'transferred', 'refunded', 'unenrolled', maybe blank
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'unenrolled']
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - not_null
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: courserunenrollment_enrollment_mode
    description: str, enrollment mode for user
  - name: courserunenrollment_has_edx_email_subscription
    description: bool, indicates whether the user should receive emails from edx
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["courserun_id", "user_id"]
  - dbt_utils.recency:
      datepart: day
      field: from_iso8601_timestamp(courserunenrollment_created_on)
      interval: 2
      config:
        severity: error
        error_if: "!=0"

- name: stg__mitxonline__app__postgres__courses_programenrollment
  columns:
  - name: programenrollment_id
    description: int, sequential ID tracking a single user enrollment
    tests:
    - unique
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: programenrollment_updated_on
    description: timestamp, specifying when an enrollment was most recently updated
    tests:
    - not_null
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment is no longer active.
      Options are 'deferred', 'transferred', 'refunded', 'unenrolled'
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - not_null
  - name: program_id
    description: int, foreign key from the courses_program table
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: programenrollment_enrollment_mode
    description: str, enrollment mode for user
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["program_id", "user_id"]

- name: stg__mitxonline__app__postgres__ecommerce_basketdiscount
  columns:
  - name: basketdiscount_id
    description: int, primary key representing a discount in a user's basket
  - name: basketdiscount_created_on
    description: timestamp, specifying when the basket discount was initially created
  - name: basketdiscount_updated_on
    description: timestamp, specifying when the basket discount was most recently
      updated
  - name: basketdiscount_applied_on
    description: timestamp, specifying when the discount was applied to the basket
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: user_id
    description: int, foreign key referencing users_user
  - name: discount_id
    description: int, foreign key referencing ecommerce_discount

- name: stg__mitxonline__app__postgres__ecommerce_basketitem
  columns:
  - name: basketitem_id
    description: int, primary key representing a item in a user's basket
  - name: basketitem_created_on
    description: timestamp, specifying when the basket item was initially created
  - name: basketitem_updated_on
    description: timestamp, specifying when the basket item was most recently updated
  - name: basketitem_quantity
    description: int, quantitiy of the item. Always 1
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: product_id
    description: int, foreign key referencing ecommerce_product

- name: stg__mitxonline__app__postgres__ecommerce_basket
  description: Checkout basket that contains courseware that a users wants to purchase
    but has not purchased yet
  columns:
  - name: basket_id
    description: int, primary key representing a user basket
  - name: basket_created_on
    description: timestamp, specifying when the basket was initially created
  - name: basket_updated_on
    description: timestamp, specifying when the basket was most recently updated
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - unique

- name: stg__mitxonline__app__postgres__flexiblepricing_flexiblepriceapplication
  description: An application for an income based discount.
  columns:
  - name: flexiblepriceapplication_id
    description: int, primary key representing a flexible pricing application
    tests:
    - not_null
    - unique
  - name: flexiblepriceapplication_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: flexiblepriceapplication_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: flexiblepriceapplication_status
    description: string, status of the application. One of "approved", "auto-approved",
      "created", "pending-manual-approval", "denied", "reset"
    tests:
    - not_null
    - accepted_values:
        values: ["approved", "auto-approved", "created", "pending-manual-approval",
          "denied", "reset"]
  - name: flexiblepriceapplication_income_usd
    description: numeric, user income in usd
  - name: flexiblepriceapplication_original_income
    description: numeric, user income in it's original currency
  - name: flexiblepriceapplication_original_currency
    description: string, currency code of orginal income
  - name: flexiblepriceapplication_country_of_income
    description: string, country code for user country of income
  - name: flexiblepriceapplication_exchange_rate_timestamp
    description: timestamp, timestamp of exchange rate used to convert the original
      income to usd
  - name: flexiblepriceapplication_date_documents_sent
    description: date, date that the user sent documents that prove their income
  - name: flexiblepriceapplication_justification
    description: string, explanation for flexible pricing application approval or
      rejection
  - name: flexiblepriceapplication_country_of_residence
    description: string, country code for user country of residece
    tests:
    - not_null
  - name: user_id
    description: int, primary key in the users_user table of the user  requesting
      flexible pricing
    tests:
    - not_null
  - name: flexiblepriceapplication_cms_submission_id
    description: int, primary key of the cms submission stored in the flexiblepricing_flexiblepricingrequestsubmission
      table
  - name: contenttype_id
    description: int, primary key in django_contenttype of either courses_course or
      courses_program
    tests:
    - not_null
  - name: courseware_object_id
    description: int, primary key in either the courses_course or courses_program
      table of the courseware the user applied for flexible pricing for
    tests:
    - not_null
  - name: flexiblepricetier_id
    description: int, primary key in flexiblepricing_flexiblepricetier of the price
      tier the user applied for
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["courseware_object_id", "contenttype_id", "user_id"]

- name: stg__mitxonline__app__postgres__flexiblepricing_flexiblepricetier
  columns:
  - name: flexiblepricetier_id
    description: int, primary key representing a flexible pricing tier
    tests:
    - not_null
    - unique
  - name: flexiblepricetier_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: flexiblepricetier_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: contenttype_id
    description: int, foreign key in django_contenttype for either course or program
    tests:
    - not_null
  - name: courseware_object_id
    description: int, id for the courseware object in either the courses_course or
      courses_program table
    tests:
    - not_null
  - name: flexiblepricetier_is_current
    description: boolean, whether the flexible pricing tier is currently enabled
    tests:
    - not_null
  - name: flexiblepricetier_income_threshold_usd
    description: numeric, maximum income in usd to qualify for the flexible price
      tier
    tests:
    - not_null
  - name: discount_id
    description: int, id of ecommerce_discount associated with the flexible price
      tier
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__flexiblepricing_currencyexchangerate
  columns:
  - name: currencyexchangerate_id
    description: int, primary key representing a country exchange rate
    tests:
    - not_null
    - unique
  - name: currencyexchangerate_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: currencyexchangerate_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: currencyexchangerate_currency_code
    description: string, currency code
    tests:
    - not_null
    - unique
  - name: currencyexchangerate_exchange_rate
    description: numeric, exchange rate to usd
    tests:
    - not_null
  - name: currencyexchangerate_description
    description: string, readable currency name

- name: stg__mitxonline__app__postgres__flexiblepricing_countryincomethreshold
  columns:
  - name: countryincomethreshold_id
    description: int, primary key representing a country income threshold
    tests:
    - not_null
    - unique
  - name: countryincomethreshold_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: countryincomethreshold_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: countryincomethreshold_country_code
    description: string, country code
    tests:
    - not_null
    - unique
  - name: countryincomethreshold_income_threshold
    description: int, usd income threshold to quantity for flexible pricing
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__ecommerce_userdiscount
  description: This table is used to pre-apply a discount when a user checks out
  columns:
  - name: userdiscount_id
    description: int, primary key representing a discount user combo
    tests:
    - not_null
  - name: userdiscount_created_on
    description: timestamp, specifying when the discount user association was initially
      created
    tests:
    - not_null
  - name: userdiscount_updated_on
    description: timestamp, specifying when the discount user association was initially
      created
    tests:
    - not_null
  - name: discount_id
    description: int, foreign key for ecommerce_discount
    tests:
    - not_null
  - name: user_id
    description: int, foreign key for users_user
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__ecommerce_discountproduct
  description: This table is used to limit dicounts to a specific product. Discounts
    which do not have a record in this table are redeemable for all products
  columns:
  - name: discountproduct_id
    description: int, primary key representing a discount product combo
    tests:
    - not_null
  - name: discountproduct_created_on
    description: timestamp, specifying when the discount product association was initially
      created
  - name: discountproduct_updated_on
    description: timestamp, specifying when the discount product association was last
      updated
  - name: discount_id
    description: int, foreign key for ecommerce_discount
    tests:
    - not_null
  - name: product_id
    description: int, foreign key for ecommerce_product

- name: stg__mitxonline__app__postgres__ecommerce_discount
  columns:
  - name: discount_id
    description: int, primary key representing a discount
    tests:
    - not_null
    - unique
  - name: discount_created_on
    description: timestamp, specifying when the discount was initially created
  - name: discount_updated_on
    description: timestamp, specifying when the discount was most recently updated
  - name: discount_amount
    description: numeric, discount amount. May be a precent or dollar amount
    tests:
    - not_null
  - name: discount_type
    description: string, one of  "percent-off", "dollars-off" and "fixed-price". Specifys
      if the ammount of the discount refers to a percent of, a dollar amount off or
      a discounted price
    tests:
    - not_null
    - accepted_values:
        values: ["percent-off", "dollars-off", "fixed-price"]
  - name: discount_amount_text
    description: str, discount amount in readable format. It can be percent-off which
      is <dollar amount>% off, dollars-off which is $<dollar amount> off or fixed-price
    tests:
    - not_null
  - name: discount_redemption_type
    description: string, one of  "one-time",  "one-time-per-user" and "unlimited"
    tests:
    - not_null
    - accepted_values:
        values: ["one-time", "one-time-per-user", "unlimited"]
  - name: discount_max_redemptions
    description: int, maximum times a coupon can be redeemed
  - name: discount_code
    description: string, discount code
    tests:
    - not_null
  - name: discount_source
    description: string, reason for the discount creation. Possible options are "marketing",
      "sales", "financial-assistance", "customer-support", "staff", "legacy"
    tests:
    - accepted_values:
        values: ["marketing", "sales", "financial-assistance", "customer-support",
          "staff", "legacy"]
  - name: discount_activated_on
    description: timestamp, specifying when the discount is activated
  - name: discount_expires_on
    description: timestamp, specifying when the discount is deactivated

- name: stg__mitxonline__app__postgres__ecommerce_discountredemption
  columns:
  - name: discountredemption_id
    description: int, primary key representing a discount redemption
  - name: discountredemption_timestamp
    description: timestamp, specifying when the discount was redeemed by the user
  - name: user_id
    description: int, foreign key for users_user
  - name: discount_id
    description: int, foreign key for ecommerce_discount
  - name: order_id
    description: int, foreign key for ecommerce_orders

- name: stg__mitxonline__app__postgres__ecommerce_transaction
  columns:
  - name: transaction_id
    description: int, primary key representing an ecommerce transaction
    tests:
    - unique
    - not_null
  - name: transaction_data
    description: json, data returned from cybersource when the transaction is fulfilled
    tests:
    - not_null
  - name: transaction_amount
    description: numeric, transaction ammount
    tests:
    - not_null
  - name: order_id
    description: int, foreign id in the ecommerce_orders tabe for the order associated
      with the transaction
    tests:
    - not_null
  - name: transaction_created_on
    description: timestamp, specifying when the transaction was initially created
  - name: transaction_updated_on
    description: timestamp, specifying when the transaction was most recently updated
  - name: transaction_readable_identifier
    description: string, unique identifier. Either the transaction_id from cybersource
      or a unique uuid
    tests:
    - not_null
    - unique
  - name: transaction_type
    description: string, transaction type, one of "refund" and "payment"
    tests:
    - accepted_values:
        values: ["refund", "payment"]
  - name: transaction_status
    description: str, transaction status from user's cybersource payment. Value could
      be ACCEPT, REVIEW. May be blank for no payment required or refund.
  - name: transaction_payment_method
    description: str, payment method from cybersource Value could be 'paypal' or 'card'.
      May be blank for no payment required or refund.
  - name: transaction_authorization_code
    description: str, authorization code from cybersource payment
  - name: transaction_bill_to_address_state
    description: str, address state from cybersource payment
  - name: transaction_bill_to_address_country
    description: str, address country from cybersource payment

- name: stg__mitxonline__app__postgres__ecommerce_line
  description: ""
  columns:
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - unique
    - not_null
  - name: order_id
    description: int, foreign key in the orders_order table for the order that contains
      the line Currently orders have exactly one line
    tests:
    - not_null
  - name: line_created_on
    description: timestamp, specifying when the line was initially created
  - name: line_updated_on
    description: timestamp, specifying when the line was most recently updated
  - name: product_version_id
    description: int, foreign key in the reversion_version table. Versioned product
    tests:
    - not_null
  - name: product_object_id
    description: int, id for the product object in either the course_courseruns or
      the course_programruns table
  - name: contenttype_id
    description: int, foreign key in the django_contenttype table, content type of
      the product

- name: stg__mitxonline__app__postgres__reversion_revision
  description: This table is used to track changes to products and transactions
  columns:
  - name: revision_id
    description: int, primary key representing a revision of a product or transaction
    tests:
    - unique
    - not_null
  - name: revision_comment
    description: string, automatically generated discription of the change
  - name: user_id
    description: int, foreign key to the users_user record for the user that made
      the change
  - name: revision_date_created
    description: timestamp, timestamp, specifying when the revision was made
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__reversion_version
  description: This table is used to track changes to products and transactions
  columns:
  - name: version_id
    description: int, primary key representing a version of a product or transaction
    tests:
    - unique
    - not_null
  - name: version_object_id
    description: int, foreign key of the object being versioned
    tests:
    - not_null
  - name: revision_id
    description: int, primary key in the reversion_revision table
    tests:
    - unique
    - not_null
  - name: contenttype_id
    description: int, foreign key to django_contenttype of the object being versioned
    tests:
    - not_null
  - name: version_object_serialized_data
    description: json, serialized data from the object at the time it was versioned

- name: stg__mitxonline__app__postgres__ecommerce_order
  columns:
  - name: order_id
    description: int, primary key representing a single MITx Online order
    tests:
    - not_null
    - unique
  - name: order_state
    description: string, order state. Options are "pending", "fulfilled", "canceled"
      "declined", "errored", "refunded", "review", "partially_refunded"
    tests:
    - accepted_values:
        values: ["pending", "fulfilled", "canceled", "declined", "errored", "refunded",
          "review", "partially_refunded"]
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was initially created
  - name: order_updated_on
    description: timestamp, specifying when the order was updated
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - not_null
  - name: order_reference_number
    description: string, readable id for the order. Shared with micromasters
    tests:
    - not_null
  - name: order_total_price_paid
    description: number, total order amount

- name: stg__mitxonline__app__postgres__courses_programrun
  description: ""
  columns:
  - name: programrun_id
    description: int, primary key representing a single MITx Online program run
    tests:
    - not_null
    - unique
  - name: programrun_tag
    description: str, string that identifies a single run in a prgram E.g. R11
    tests:
    - not_null
  - name: programrun_start_on
    description: timestamp, specifying when the program run starts
  - name: programrun_end_on
    description: timestamp, specifying when the program run ends
  - name: programrun_updated_on
    description: timestamp, specifying when a program run was last updated
  - name: programrun_created_on
    description: timestamp, specifying when a program run was initially created
  - name: program_id
    description: int, foreign key to courses_program representing a single MITx Online
      program
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__ecommerce_product
  columns:
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - unique
    - not_null
  - name: product_price
    description: numeric, the price of the product
    tests:
    - not_null
  - name: product_is_active
    description: boolean, whether the product is visible in the app
    tests:
    - not_null
  - name: product_object_id
    description: int, the course run or program run id in the courses_courserun or
      courses_programrun table
    tests:
    - not_null
  - name: product_created_on
    description: timestamp, the timestamp the product was created
    tests:
    - not_null
  - name: product_updated_on
    description: timestamp, the timestamp the product was last updated
    tests:
    - not_null
  - name: product_description
    description: string, the product description, usually the readable_id from the
      courses_course table
    tests:
    - not_null
  - name: contenttype_id
    description: int, the id of the product object type in the django_contenttype
      table
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["product_object_id", "contenttype_id"]
      row_condition: "product_is_active"

- name: stg__mitxonline__app__postgres__django_contenttype
  columns:
  - name: contenttype_id
    description: int, sequential ID for the django model
    tests:
    - unique
    - not_null
  - name: contenttype_full_name
    description: string, name for django model. A combination of the models name and
      functional group
    tests:
    - unique
    - not_null

- name: stg__mitxonline__app__postgres__users_user
  columns:
  - name: user_id
    description: int, sequential ID representing one user in MITx Online
    tests:
    - unique
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - unique
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - unique
    - not_null
  - name: user_is_active
    description: boolean, used to soft delete user accounts
  - name: user_full_name
    description: str, the user's full name
    tests:
    - not_null
  - name: user_joined_on
    description: timestamp, specifying when a user account was initially created
  - name: user_last_login
    description: timestamp, specifying when a user last logged in

- name: stg__mitxonline__app__postgres__users_legaladdress
  columns:
  - name: user_address_id
    description: int, sequential ID
    tests:
    - unique
    - not_null
  - name: user_address_country
    description: string, user country code
    tests:
    - not_null
  - name: user_address_state
    description: string, state code for the user's address. e.g. US-NY It's required
      field for new users, may be blank for existing users.
  - name: user_id
    description: int, foreign key to users_user
    tests:
    - unique
    - not_null
  - name: user_last_name
    description: string, user last name
    tests:
    - not_null
  - name: user_first_name
    description: string, user first name
    tests:
    - not_null

- name: stg__mitxonline__app__postgres__users_userprofile
  columns:
  - name: user_profile_id
    description: int, sequential ID representing a single MITx Online user profile
    tests:
    - unique
    - not_null
  - name: user_id
    description: int,  unique ID for user on MITx Online
    tests:
    - unique
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__users_user')
        field: user_id
  - name: user_birth_year
    description: int, user birth year
  - name: user_company
    description: str, user company
  - name: user_job_title
    description: str, user job title
  - name: user_industry
    description: str, user job industry
  - name: user_job_function
    description: str, user job function
  - name: user_leadership_level
    description: str, user leadership level
  - name: user_type_is_student
    description: boolean, indicating if learner is identified as Student
  - name: user_type_is_professional
    description: boolean, indicating if learner is identified as Professional
  - name: user_type_is_educator
    description: boolean, indicating if learner is identified as Educator
  - name: user_type_is_other
    description: boolean, indicating if learner is identified as Other (not Professional,
      Student, or Educator)
  - name: user_gender
    description: str, user gender
    tests:
    - accepted_values:
        values: '{{ var("gender_values") }}'
  - name: user_company_size
    description: str, company size
    tests:
    - accepted_values:
        values: ['Small/Start-up (1+ employees)', 'Small/Home office (1-9 employees)',
          'Small (10-99 employees)', 'Small to medium-sized (100-999 employees)',
          'Medium-sized (1000-9999 employees)', 'Large Enterprise (10,000+ employees)',
          "Other (N/A or Don''t know)"]
  - name: user_years_experience
    description: str, years experience
    tests:
    - accepted_values:
        values: ['Less than 2 years', '2-5 years', '6 - 10 years', '11 - 15 years',
          '16 - 20 years', 'More than 20 years', 'Prefer not to say']
  - name: user_highest_education
    description: str, user highest education
    tests:
    - accepted_values:
        values: '{{ var("highest_education_values") }}'
  - name: user_profile_created_on
    description: timestamp, date and time when this profile data was initially created
  - name: user_profile_updated_on
    description: timestamp, date and time when this profile data was most recently
      updated

- name: stg__mitxonline__app__postgres__courses_course
  columns:
  - name: course_id
    description: int, primary key representing a single MITx Online course
    tests:
    - unique
    - not_null
  - name: course_is_live
    description: boolean, indicating whether course is available to users on MITx
      Online website
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
  - name: course_readable_id
    description: str, Open edX ID formatted as course-v1:{org}+{course code}
    tests:
    - unique
    - not_null
  - name: course_edx_readable_id
    description: str, The edx course ID of the course in the format as {org}/{course}
    tests:
    - unique
    - not_null
  - name: course_number
    description: str, unique string for the course e.g. 14.009x
    tests:
    - unique
    - not_null
  - name: course_created_on
    description: timestamp, specifying when a course was initially created
  - name: course_updated_on
    description: timestamp, specifying when a course was most recently updated

- name: stg__mitxonline__app__postgres__courses_program
  columns:
  - name: program_id
    description: int, primary key representing a single MITx Online program
    tests:
    - unique
    - not_null
  - name: program_is_live
    description: boolean, indicating whether the program is available to users
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_type
    description: str, type of the program. Value is free text, it could be MicroMasters®,
      Series, etc
  - name: program_is_dedp
    description: boolean, specifying if the program is DEDP from readable_id
    tests:
    - not_null
  - name: program_is_micromasters
    description: boolean, specifying if the program is MITx MicroMasters® Program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code}
    tests:
    - unique
    - not_null
  - name: program_created_on
    description: timestamp, specifying when a program was initially created
  - name: program_updated_on
    description: timestamp, specifying when a program was most recently updated

- name: stg__mitxonline__app__postgres__courses_programrequirement
  columns:
  - name: programrequirement_id
    description: int, primary key representing a MITx Online program requirement node
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_program')
        field: program_id
  - name: programrequirement_node_type
    description: str, there are 3 types of nodes that exist in a requirement tree
      - program_root (represent a program) - course (represent a reference to a course)
      - operator (represent a logical operation over a set of courses)
    tests:
    - accepted_values:
        values: ["program_root", "course", "operator"]
  - name: programrequirement_path
    description: str, the full materialized path for each node (readonly) e.g. 0001
      is root path, 00010001 is the path to a node in this requirement tree
    tests:
    - not_null
  - name: programrequirement_depth
    description: int, depth of a node in the tree. A root node has a depth of 1. (readonly)
    tests:
    - not_null
  - name: programrequirement_numchild
    description: int, the number of children of a node (readonly)
    tests:
    - not_null
  - name: programrequirement_title
    description: str, title of the requirement
  - name: programrequirement_operator
    description: str, the logical operation over a set of courses, it can be all_of,
      min_number_of or blank
    tests:
    - accepted_values:
        values: ["all_of", "min_number_of"]
  - name: programrequirement_operator_value
    description: int, value of the operator for this requirement e.g. if operator
      is all_of, the corresponding operator_value 3 means all of 3 courses
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["program_id", "programrequirement_depth"]
      row_condition: "programrequirement_depth=1"

- name: stg__mitxonline__app__postgres__courses_courserun
  columns:
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
    tests:
    - unique
    - not_null
  - name: courserun_is_live
    description: boolean, indicating whether the course run is available to users
      on MITx Online website
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_tag
    description: str, string that identifies a single run in a course E.g. 1T2022
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single MITx Online
      course
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - unique
    - not_null
  - name: courserun_edx_readable_id
    description: str, The edx course ID of the course run in the format as {org}/{course}/{run}.
      it can be used to match courserun_readable_id in stg__edxorg__bigquery__mitx_courserun
    tests:
    - unique
    - not_null
  - name: courserun_platform
    description: str, indicating whether this course runs on MITx Online or edX.org.
      Some of edx.org data were migrated from MicroMasters
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: courserun_url
    description: str, url location for the course run in MITx Online
  - name: courserun_is_self_paced
    description: boolean, indicating whether users can take this course at their own
      pace and earn certificate at any time
  - name: courserun_start_on
    description: timestamp, specifying when the course begins
  - name: courserun_end_on
    description: timestamp, specifying when the course ends
  - name: courserun_enrollment_start_on
    description: timestamp, specifying when enrollment starts
  - name: courserun_enrollment_end_on
    description: timestamp, specifying when enrollment ends
  - name: courserun_expired_on
    description: timestamp, specifying the date time beyond which users should not
      see link to this course run on their dashboard
  - name: courserun_upgrade_deadline
    description: timestamp, specifying the date time beyond which users can not enroll
      in paid course mode
  - name: courserun_created_on
    description: timestamp, specifying when a course run was initially created
  - name: courserun_updated_on
    description: timestamp, specifying when a course run was most recently updated

- name: stg__mitxonline__app__postgres__courses_coursetopic
  columns:
  - name: coursetopic_id
    description: int, primary key representing a single MITx Online course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_created_on
    description: timestamp, specifying when a course topic was initially created
  - name: coursetopic_updated_on
    description: timestamp, specifying when a course topic was most recently updated

- name: stg__mitxonline__app__postgres__courses_course_to_topic
  columns:
  - name: coursetotopic_id
    description: int, primary key representing a single MITx Online course tagged
      to a topic
    tests:
    - unique
    - not_null
  - name: coursetopic_id
    description: int, foreign key to courses_coursetopic representing a single course
      topic
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_coursetopic')
        field: coursetopic_id
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coursetopic_id", "course_id"]

- name: stg__mitxonline__app__postgres__courses_blockedcountry
  columns:
  - name: blockedcountry_id
    description: int, primary key for courses_blockedcountry table from MITx Online
    tests:
    - unique
    - not_null
  - name: blockedcountry_code
    description: str, two-letter code of a blocked country for a course
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: blockedcountry_created_on
    description: timestamp, specifying when a blocked country record was initially
      created
  - name: blockedcountry_updated_on
    description: timestamp, specifying when a blocked country record was most recently
      updated
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["blockedcountry_code", "course_id"]

- name: stg__mitxonline__app__postgres__courses_courseruncertificate
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MITxOnline course certificate
      record
    tests:
    - unique
    - not_null
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
  - name: courseruncertificate_url
    description: str, the full URL to the certificate on MITx Online if it's not invoked
    tests:
    - unique
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: courseruncertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: courseruncertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxonline__app__postgres__courses_programcertificate
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MITxOnline program certificate
      record
    tests:
    - unique
    - not_null
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_program')
        field: program_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__users_user')
        field: user_id
  - name: certificate_page_revision_id
    description: int, foreign key to wagtailcore_pagerevision (could be blank)
  - name: programcertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: programcertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id"]

- name: stg__mitxonline__app__postgres__courses_courserungrade
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MITxOnline grade record
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_courserun')
        field: courserun_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__users_user')
        field: user_id
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
  - name: courserungrade_is_set_by_admin
    description: boolean, indicating whether this grade is set by a staff user
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
  - name: courserungrade_created_on
    description: timestamp, specifying when a grade was initially created
  - name: courserungrade_updated_on
    description: timestamp, specifying when a grade was most recently updated
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]

- name: stg__mitxonline__openedx__mysql__auth_user
  description: MITx Online open edX users
  columns:
  - name: openedx_user_id
    description: int, sequential ID representing a user on MITx Online open edX platform
    tests:
    - unique
    - not_null
  - name: user_username
    description: str, unique username on the open edX platform
    tests:
    - unique
    - not_null
  - name: user_email
    description: str, user's email associated with their account
    tests:
    - unique
    - not_null
  - name: user_is_active
    description: boolean, used to soft delete users
    tests:
    - not_null
  - name: user_is_staff
    description: boolean, indicating whether user can log into admin site
    tests:
    - not_null
  - name: user_is_superuser
    description: boolean, indicating whether user has all permissions on open edx
      platform
    tests:
    - not_null

- name: stg__mitxonline__openedx__tracking_logs__user_activity
  description: This table is deduped as raw table has duplicate events. It filters
    out blank username events since these don't supply user identifiers and also those
    server "exception" events due to server errors
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, reference user id in auth_user from open edX. Extracted from
      context field.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course number}+{run_tag}.
      Extracted from various fields - context.course_id, context.path, event_type
      and page. The course ID extracted from context field may not be valid, it would
      require joining with courserun table to be sure. This field could be blank for
      any events that are not for any specific course .e.g. user login/out, visiting
      dashboard, some course team events e.g. course export from studio
  - name: org_id
    description: str, reference name in organizations_organization from open edX.
      e.g. MITxT . Extracted from context field
  - name: useractivity_path
    description: str, URL that generated this event. Extracted from context field
  - name: useractivity_context_object
    description: object, it includes member fields that provide contextual information.
      Common fields apply to all events are course_id, org_id, path, user_id. Other
      member fields for applicable events are course_user_tags, module.
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The values are - browser, mobile, server, task
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, type of event triggered. Values depend on event_source.
    tests:
    - not_null
  - name: useractivity_event_name
    description: str, type of event triggered. When this field is present for an event,
      it supersedes the event_type field.
  - name: useractivity_event_object
    description: object,it includes member fields that identify specifics of each
      triggered event. Different member fields are supplied for different events.
    tests:
    - not_null
  - name: useractivity_page_url
    description: str, url of the page the user was visiting when the event was emitted.
  - name: useractivity_session_id
    description: str, 32-character value to identify the user’s session. All browser
      events and the server 'enrollment' events include session value. Other server
      events and mobile events do not include a session value.
  - name: useractivity_ip
    description: str, IP address of the user who triggered the event. Empty for mobile
      events.
  - name: useractivity_http_host
    description: str, The site visited by the user. e.g. courses.mitxonline.mit.edu
    tests:
    - not_null
  - name: useractivity_http_user_agent
    description: str, browser agent string of the user who triggered the event.
  - name: useractivity_http_accept_language
    description: str, value from the HTTP Accept-Language request-header field
  - name: useractivity_http_referer
    description: str, URI from the HTTP Referer request-header field
  - name: useractivity_timestamp
    description: timestamp, time at which the event was emitted, formatted as ISO
      8601 string
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "useractivity_context_object", "useractivity_event_source",
        "useractivity_event_type", "useractivity_event_object", "useractivity_timestamp"]
