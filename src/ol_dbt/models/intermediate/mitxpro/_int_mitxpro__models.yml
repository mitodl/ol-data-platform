---
version: 2

models:
- name: int__mitxpro__ecommerce_allorders
  description: B2B and regular orders combined into one table
  columns:
  - name: order_id
    description: int, foreign key for ecommerce_order
  - name: b2border_id
    description: int, foreign key for b2becommerce_b2border
  - name: order_created_on
    description: timestamp, specifying when the order was initially created. If this
      is a b2b order it will be the timestamp that order was created otherwise it
      will be when the regular order was created.
    tests:
    - not_null
  - name: order_state
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
  - name: line_id
    description: int, foreign key for ecommerce_line
  - name: product_id
    description: int, foreign key for ecommerce_product
  - name: couponpaymentversion_payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies
  - name: couponpaymentversion_coupon_type
    description: string, one of 'single-use' or 'promo'. Promo coupon codes can be
      used multiple times
  - name: b2border_discount
    description: numeric, dollar discount amount for the order
  - name: redeemed
    description: boolean, when a fulfilled/refunded order uses a coupon this field
      will be true otherwise it will be null
  - name: coupon_redeemed_on
    description: timestamp, specifying when the b2b or regular coupon was redeemed.
  - name: user_email
    description: str, user email associated with their account
  - name: product_type
    description: string, readable product type
  - name: courserun_id
    description: int, foreign key to courses_courserun
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
  - name: coupon_id
    description: int, foreign key referencing ecommerce_coupon
  - name: b2bcoupon_id
    description: int, foreign key to b2becommerce_b2bcoupon
  - name: b2border_contract_number
    description: string, contract number used to identify the order
  - name: req_reference_number
    description: json, cybersource req reference number for a payment
  - name: productversion_readable_id
    description: string, the readable_id field from the product object
  - name: receipt_authorization_code
    description: str, authorization code from cybersource payment.
  - name: receipt_transaction_id
    description: string, unique identifier. Either the transaction_id from cybersource
      or a unique uuid
  - name: receipt_bill_to_address_country
    description: string, address country from cybersource payment
  - name: receipt_bill_to_address_state
    description: string, address state from cybersource payment
  - name: receipt_payment_method
    description: string, payment method from cybersource. Value could be 'paypal'
      or 'card'.
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["order_id", "b2border_id", "line_id", "coupon_id"]
- name: int__mitxpro__b2becommerce_b2bcouponredemption
  description: A B2B coupon is considered redeemed when it's used to place an order.
    The coupon provides a discount on the company's bulk order.
  columns:
  - name: b2bcouponredemption_id
    description: int, primary key representing a b2b coupon redemption
    tests:
    - not_null
    - unique
  - name: b2border_id
    description: int, foreign key to b2becommerce_b2border
    tests:
    - not_null
  - name: b2bcoupon_id
    description: int, foreign key representing a b2b coupon
    tests:
    - not_null
  - name: b2bcouponredemption_updated_on
    description: timestamp, specifying when the b2b coupon redemption was most recently
      updated
    tests:
    - not_null
  - name: b2bcouponredemption_created_on
    description: timestamp, specifying when the b2b coupon redemption was initially
      created
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["b2border_id", "b2bcoupon_id"]
- name: int__mitxpro__ecommerce_allcoupons
  description: B2B and regular coupons combined into one table
  columns:
  - name: coupon_code
    description: string, coupon code for the coupon
    tests:
    - not_null
  - name: coupon_name
    description: string, human readable name for the coupon payment
  - name: coupon_created_on
    description: timestamp, specifying when the coupon was initially created
    tests:
    - not_null
  - name: payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies. This will be null for records sourced from b2b.
  - name: discount_amount
    description: string, either dollar amount off or percentage discount. If the data
      is coming from b2b it is always a percentage.
    tests:
    - not_null
  - name: coupon_type
    description: string, one of 'single-use' or 'promo'. Promo coupon codes can be
      used multiple times. This will be null for records sourced from b2b.
  - name: discount_source
    description: string, one of "staff", "marketing", "credit_card", "purchase_order",
      "sales". "staff" coupons are used to allow staff to enroll in courses. "marketing"
      coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
      and "sales" correspond to different ways that companies can pay for vouchers
      for their employees to enroll in courses or programs. This will be null for
      records sourced from b2b.
  - name: activated_on
    description: timestamp, activation timestamp for the coupon
  - name: expires_on
    description: timestamp, expiration timestamp for the coupon
  - name: coupon_source_table
    description: string, either "ecommerce_coupon", "b2bcoupon". "ecommerce_coupon"
      coupons are sourced from the int__mitxpro__ecommerce_coupon table and are used
      to recieve a discount on a course or program. "b2bcoupon" coupons are sourced
      from the int__mitxpro__b2becommerce_b2bcoupon table and represent a coupon used
      by a business which can include many individuals.
  - name: b2bcoupon_id
    description: int, foreign key to b2becommerce_b2bcoupon.
  - name: coupon_id
    description: int, foreign key referencing ecommerce_coupon. This will be null
      for records sourced from b2b.
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["b2bcoupon_id", "coupon_id"]
- name: int__mitxpro__ecommerce_couponversion
  description: A version of a coupon linked to a specific couponpaymentversion record
  columns:
  - name: couponversion_id
    description: int, primary key representing a coupon version
    tests:
    - unique
    - not_null
  - name: couponversion_created_on
    description: timestamp, specifying when the coupon version was initially created
    tests:
    - not_null
  - name: couponversion_updated_on
    description: timestamp, specifying when the coupon version was most recently updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key referencing ecommerce_coupon
    tests:
    - not_null
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_couponpaymentversion
    tests:
    - not_null
- name: int__mitxpro__ecommerce_couponredemption
  description: A row in this table is added when an order uses a coupon code
  columns:
  - name: couponredemption_id
    description: int, primary key representing a coupon redemption
    tests:
    - not_null
  - name: couponredemption_created_on
    description: timestamp, specifying when the coupon redemption record was created.
    tests:
    - not_null
  - name: couponredemption_updated_on
    description: timestamp, specifying when the coupon redemption was updated most
      recently updated
    tests:
    - not_null
  - name: couponversion_id
    description: int, foreign key for ecommerce_couponversion
    tests:
    - not_null
  - name: order_id
    description: int, foreign key for ecommerce_order
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["couponversion_id", "order_id"]
- name: int__mitxpro__b2becommerce_b2breceipt
  description: Data returned from cybersource when a user pays for a b2b order
  columns:
  - name: b2breceipt_id
    description: int, primary key representing a b2b receipt
    tests:
    - not_null
    - unique
  - name: b2breceipt_created_on
    description: timestamp, specifying when the b2b receipt was initially created
    tests:
    - not_null
  - name: b2breceipt_updated_on
    description: timestamp, specifying when the b2b receipt most recently updated
    tests:
    - not_null
  - name: b2breceipt_data
    description: json, cybersource data for a payment
    tests:
    - not_null
  - name: b2border_id
    description: int, primary key in b2becommerce_b2border
  - name: b2breceipt_transaction_status
    description: str, transaction status from cybersource payment. Value could be
      ACCEPT, CANCEL, ERROR, REVIEW or DECLINE.
    tests:
    - not_null
  - name: b2breceipt_reference_number
    description: str, transaction reference number from cybersource payment
    tests:
    - not_null
  - name: b2breceipt_transaction_id
    description: str, transaction identifier from cybersource payment
  - name: b2breceipt_payment_method
    description: str, payment method from cybersource payment. e.g. card
  - name: b2breceipt_authorization_code
    description: str, authorization code from cybersource payment
  - name: b2breceipt_bill_to_address_state
    description: str, address state from cybersource payment
  - name: b2breceipt_bill_to_address_country
    description: str, address country from cybersource payment
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__b2becommerce_b2breceipt')

- name: int__mitxpro__b2becommerce_b2border
  description: A B2B order is created when a company or other purchaser buys enrollment
    codes for many of learners through the xpro web form. This creates full price
    off coupons that learners can redeem for an enrollment
  columns:
  - name: b2border_id
    description: int, primary key representing a b2b order
    tests:
    - not_null
    - unique
  - name: b2border_created_on
    description: timestamp, specifying when the b2b order was initially created
    tests:
    - not_null
  - name: b2border_updated_on
    description: timestamp, specifying when the b2b order was most recently updated
    tests:
    - not_null
  - name: b2border_status
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
    tests:
    - not_null
  - name: b2border_num_seats
    description: int, number of enrollment codes that were purchased
    tests:
    - not_null
  - name: b2border_email
    description: string, email where the enrollment codes were sent
    tests:
    - not_null
  - name: b2border_per_item_price
    description: numeric, per item price for each enrollment code
    tests:
    - not_null
  - name: b2border_total_price
    description: numeric, total price for the order
    tests:
    - not_null
  - name: productversion_id
    description: int, foreign key to ecommerce_productversion. The course run or program
      for which the enrollment codes were purchased
    tests:
    - not_null
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_productcouponversion. The coupon payment
      version of the enrollment codes generated by this order
  - name: b2border_unique_uuid
    description: string, auto generated uuid used to identify the order
    tests:
    - not_null
    - unique
  - name: b2border_discount
    description: numeric, dollar discount amount for the order
  - name: b2bcoupon_id
    description: int, foreign key to b2becommerce_b2bcoupon. A coupon that was redeemed
      for the order.
  - name: b2border_contract_number
    description: string, contract number used to identify the order
  - name: programrun_id
    description: int, foreign key to courses_programrun. Set when the product is a
      program
  - name: product_id
    description: int, foreign key in ecommerce_product
    tests:
    - not_null
  - name: courserun_id
    description: int, foreign key in courses_courserun
  - name: program_id
    description: int, foreign key in courses_program
  - name: product_type
    description: string, readable product type
    tests:
    - not_null
#  - name: salesforce_opportunity_id
#    description: string, ID of Salesforce Opportunity
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__b2becommerce_b2border')
- name: int__mitxpro__b2becommerce_b2bcoupon
  description: B2B coupons are coupons that allow us to give a discount to companies
    buying bulk seats for their employees
  columns:
  - name: b2bcoupon_id
    description: int, primary key representing a b2b coupon
    tests:
    - not_null
    - unique
  - name: b2bcoupon_created_on
    description: timestamp, specifying when the b2b coupon was initially created
    tests:
    - not_null
  - name: b2bcoupon_updated_on
    description: timestamp, specifying when the b2b coupon was most recently updated
    tests:
    - not_null
  - name: b2bcoupon_name
    description: string, human readable name to indentify the b2b coupon
    tests:
    - not_null
  - name: b2bcoupon_coupon_code
    description: string, coupon code for the coupon
    tests:
    - not_null
  - name: b2bcoupon_discount_percent
    description: numeric, the discount percenage. Between 0 and 1
    tests:
    - not_null
  - name: b2bcoupon_is_enabled
    description: boolean, whether the b2b coupon is usable
    tests:
    - not_null
  - name: b2bcoupon_expires_on
    description: timestamp, expiration timestamp for the b2b coupon
  - name: b2bcoupon_activated_on
    description: timestamp, activation timestamp for the b2b coupon
  - name: company_id
    description: foreign key to ecommerce_company. If no company id is set the b2b
      coupon can be used by any company
  - name: product_id
    description: int, foreign key for ecommerce_product. If no product id is set,
      the b2b coupon can be used for any product
  - name: b2bcoupon_is_reusable
    description: boolean, when true the coupon can be redeemed multiple times
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__b2becommerce_b2bcoupon')
- name: int__mitxpro__ecommerce_productcouponassignment
  description: Coupon assignments made through bulk coupon assignment google sheets.
    These coupons can be redeemed by users with a specific email for a specific product
  columns:
  - name: productcouponassignment_id
    description: int, primary key representing a coupon assignment
    tests:
    - unique
    - not_null
  - name: productcouponassignment_created_on
    description: timestamp, specifying when the oupon assignment was created
    tests:
    - not_null
  - name: productcouponassignment_updated_on
    description: timestamp, specifying when the  coupon assignment was most recently
      updated
    tests:
    - not_null
  - name: productcouponassignment_email
    description: string, user email that can redeem the coupon
    tests:
    - not_null
  - name: productcouponassignment_is_redeemed
    description: boolean, whether the user redeemed the coupon to enroll in the course
    tests:
    - not_null
  - name: productcouponassignment_message_status
    description: string, email message status. One of  "delivered", "failed", "opened",
      "clicked"
  - name: productcouponassignment_message_status_updated_on
    description: timestamp, timestamp when the message status was last updated
  - name: productcouponassignment_original_email
    description: string, original email for the record, used when the email for a
      coupon needs to change
  - name: coupon_id
    description: int, foreign key in ecommerce_coupon
  - name: product_id
    description: int, foreign key in ecommerce_product
  - name: programrun_id
    description: int, foreign key in courses_programrun
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_productcouponassignment')
- name: int__mitxpro__ecommerce_couponproduct
  description: This table is used to limit coupons to a specific product. Coupons
    which do not have a record in this table are redeemable for all products
  columns:
  - name: couponproduct_id
    description: int, primary key representing a coupon product combo
    tests:
    - not_null
  - name: couponproduct_created_on
    description: timestamp, specifying when the coupon product association was initially
      created
    tests:
    - not_null
  - name: couponproduct_updated_on
    description: timestamp, specifying when the coupon product association was most
      recently updated
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key for ecommerce_coupon
    tests:
    - not_null
  - name: product_id
    description: int, foreign key for ecommerce_product
    tests:
    - not_null
  - name: programrun_id
    description: int, foreign key for courses_programrun, may be set when the product
      type is a program
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coupon_id", "product_id"]
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_couponproduct')
- name: int__mitxpro__ecommerce_couponpaymentversion
  description: The ecommerce_couponpaymentversion holds information about a batch
    of coupons. A coupon payment version has information about the dollar or percentage
    amount of the discount, the number of available coupons that can be used to redeem
    the discount, how many times they can be redeemed and the source of the coupons.
    Coupon groups can be generated internally, for example to allow staff to enroll
    in courses without paying or marketing to create promos that allow learners to
    take a percentage or dollar amount off the full course price. Other coupon groups
    are created when a company buys bulk seats in a course for their employees, which
    generates a batch of 100% off coupons that learners can use to enroll in a course
    or program.
  columns:
  - name: couponpaymentversion_id
    description: int, primary key representing a coupon payment version
    tests:
    - not_null
  - name: couponpaymentversion_created_on
    description: timestamp, specifying when the coupon payment version was initially
      created
    tests:
    - not_null
  - name: couponpaymentversion_updated_on
    description: timestamp, specifying when the coupon paymemt  version was most recently
      updated
    tests:
    - not_null
  - name: couponpaymentversion_coupon_type
    description: string, one of 'single-use' or 'promo'. Promo coupon codes can be
      used multiple times
    tests:
    - not_null
  - name: couponpaymentversion_num_coupon_codes
    description: int, number of coupon objects associated with the payment version
    tests:
    - not_null
  - name: couponpaymentversion_max_redemptions
    description: int, maximum number of redemptions for the coupon payment version
    tests:
    - not_null
  - name: couponpaymentversion_max_redemptions_per_user
    description: int, maximum number of redemptions per user for the coupon payment
      version
    tests:
    - not_null
  - name: couponpaymentversion_discount_amount
    description: number, either dollar amount or percentage (between 0 and 1) discount
    tests:
    - not_null
  - name: couponpaymentversion_discount_amount_text
    description: string, discount amount in readable format. It can be percent-off
      which is <dollar amount * 100>% off, dollars-off which is $<dollar amount> off
    tests:
    - not_null
  - name: couponpayment_name
    description: string, human readable name for the coupon payment
    tests:
    - not_null
  - name: couponpaymentversion_expires_on
    description: timestamp, expiration timestamp for the coupon payment version
  - name: couponpaymentversion_activated_on
    description: timestamp, activation timestamp for the coupon payment version
  - name: couponpaymentversion_is_automatic
    description: boolean, whether the coupon should be automatically applied to eligible
      orders
    tests:
    - not_null
  - name: couponpaymentversion_discount_source
    description: string, one of "credit_card", "purchase_order", "marketing, "sales",
      "staff". "staff" coupons are used to allow staff to enroll in courses. "marketing"
      coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
      and "sales" correspond to different ways that companies can pay for vouchers
      for their employees to enroll in courses or programs
    tests:
    - accepted_values:
        values: ["credit_card", "purchase_order", "marketing", "sales", "staff", ""]
  - name: couponpaymentversion_payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies
  - name: couponpaymentversion_tag
    description: string, optional string tag used to identify the coupon payment version
  - name: company_id
    description: foreign key referencing ecommerce_company
  - name: couponpaymentversion_discount_type
    description: one of percent-off or dollars-off
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_couponpaymentversion')
- name: int__mitxpro__ecommerce_coupon
  description: A coupon code that can be used to recieve a discount on a course or
    program
  columns:
  - name: coupon_id
    description: int, primary key representing a coupon
    tests:
    - unique
    - not_null
  - name: coupon_created_on
    description: timestamp, specifying when the coupon was initially created
    tests:
    - not_null
  - name: coupon_updated_on
    description: timestamp, specifying when the coupon was most recently updated
    tests:
    - not_null
  - name: coupon_code
    description: string, coupon code for the coupon
    tests:
    - not_null
  - name: couponpayment_name
    description: string, human readable tag for coupon payment associated with the
      coupon
    tests:
    - not_null
  - name: coupon_is_active
    description: boolean, whethere or not the coupon is currently active
    tests:
    - not_null
  - name: coupon_applies_to_future_runs
    description: boolean, if true the coupon is automatically enabled for future runs
      of the product the coupon is associated with
    tests:
    - not_null
  - name: coupon_is_global
    description: boolean, if true the coupon is valid for all products
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_coupon')
- name: int__mitxpro__ecommerce_company
  description: A company that purchases bulk enrollments to xpro courses or programs
  columns:
  - name: company_id
    description: int, primary key representing a company
    tests:
    - unique
    - not_null
  - name: company_created_on
    description: timestamp, specifying when the company record was initially created
    tests:
    - not_null
  - name: company_updated_on
    description: timestamp, specifying when the company record was most recently updated
    tests:
    - not_null
  - name: company_name
    description: string, company name
    tests:
    - unique
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_company')
- name: int__mitxpro__ecommerce_basketrunselection
  description: The course runs the user selected for the basket items in their basket.
    If the basket item is a course run, there is one ecommerce_basketrunselection
    record. If the basket item  is a program, there will be a record for each course
    run from the program that is selected by the user. Once the user completes the
    purchase, these records become records in ecommerce_linerunselection
  columns:
  - name: basketrunselection_id
    description: int, primary key representing a basket course run selection
    tests:
    - not_null
    - unique
  - name: basketrunselection_created_on
    description: timestamp, specifying when the basket course run selection was initially
      created
  - name: basketrunselection_updated_on
    description: timestamp, specifying when the basket course run selection was most
      recently updated
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - not_null
  - name: basket_id
    description: int, primary key in ecommerce_basket
    tests:
    - not_null
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["basket_id", "courserun_id"]
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_basketrunselection')
- name: int__mitxpro__ecommerce_basketitem
  description: The ecommerce_products that the user has in their basket but has not
    purchased yet
  columns:
  - name: basketitem_id
    description: int, primary key representing a item in a user's basket
  - name: basketitem_created_on
    description: timestamp, specifying when the basket item was initially created
  - name: basketitem_updated_on
    description: timestamp, specifying when the basket item was most recently updated
  - name: basketitem_quantity
    description: int, quantitiy of the item. Always 1
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: product_id
    description: int, foreign key referencing ecommerce_product
  - name: programrun_id
    description: int, foreign key referencing courses_programrun, present if the product
      is a program
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_basketitem')
- name: int__mitxpro__ecommerce_basket
  description: Checkout basket that contains courseware that a users wants to purchase
    but has not purchased yet
  columns:
  - name: basket_id
    description: int, primary key representing a user basket
  - name: basket_created_on
    description: timestamp, specifying when the basket was initially created
  - name: basket_updated_on
    description: timestamp, specifying when the basket was most recently updated
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - unique
  - name: coupon_id
    description: int, foreign key to the ecommerce_coupons table
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_basket')
- name: int__mitxpro__ecommerce_receipt
  description: Data returned from cybersource when a user pays for an order
  columns:
  - name: order_id
    description: int, primary key in ecommerce_order
  - name: receipt_id
    description: int, primary key representing a receipt
    tests:
    - not_null
    - unique
  - name: receipt_created_on
    description: timestamp, specifying when the receipt was initially created
    tests:
    - not_null
  - name: receipt_updated_on
    description: timestamp, specifying when the receipt most recently updated
    tests:
    - not_null
  - name: receipt_data
    description: json, cybersource data for a payment
    tests:
    - not_null
  - name: receipt_transaction_status
    description: str, transaction status from user's cybersource payment. Value could
      be ACCEPT, CANCEL, ERROR, REVIEW or DECLINE.
    tests:
    - not_null
  - name: receipt_reference_number
    description: str, transaction reference number from user's cybersource payment
    tests:
    - not_null
  - name: receipt_transaction_id
    description: str, transaction identifier from user's cybersource payment. Maybe
      blank for CANCEL or ERROR transactions
  - name: receipt_payment_method
    description: str, payment method from user's cybersource payment. Value could
      be 'paypal' or 'card' if payment is not cancelled
  - name: receipt_authorization_code
    description: str, authorization code from user's cybersource payment
  - name: receipt_bill_to_address_state
    description: str, address state from user's cybersource payment
  - name: receipt_bill_to_address_country
    description: str, address country from user's cybersource payment
  - name: receipt_payer_name
    description: str, payer name from cybersource payment transaction
  - name: receipt_payer_email
    description: str, payer email from cybersource payment transaction
  - name: receipt_payer_ip_address
    description: str, payer IP address from cybersource payment transaction
  - name: receipt_payment_card_number
    description: str, last 4 digits credit card number from cybersource payment transaction
  - name: receipt_payment_card_type
    description: str, name of the card type, card_type_name from cybersource payment
      transaction, e.g., Visa
  - name: receipt_payment_amount
    description: numeric, total amount for the order - req_amount from cybersource
      payment transaction
  - name: receipt_payment_currency
    description: str, currency used for the order - req_currency from cybersource
      payment transaction
  - name: receipt_payment_timestamp
    description: str, signed_date_time (payment date) from cybersource
  - name: receipt_transaction_uuid
    description: str, unique merchant-generated identifier - req_transaction_uuid
      from cybersource payment transaction, e.g., 02815b4f08e56882751a043839b7b481
  - name: receipt_transaction_type
    description: str, type of transaction - req_transaction_type from cybersource
      payment transaction, e.g., sale
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_receipt')

- name: int__mitxpro__ecommerce_order
  columns:
  - name: order_id
    description: int, primary key representing a single xpro order
    tests:
    - unique
    - not_null
  - name: order_state
    description: string, order state. Options are "fulfilled", "failed", "created"
      "refunded"
    tests:
    - not_null
    - accepted_values:
        values: ['fulfilled', 'failed', 'created', 'refunded']
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - not_null
  - name: order_updated_on
    description: timestamp, specifying when the order was most recently updated
    tests:
    - not_null
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was most created
    tests:
    - not_null
  - name: coupon_id
    description: int, foreign key to ecommerce_coupon for orders that use a coupon
  - name: coupon_code
    description: string, coupon code for orders that use a coupon
  - name: couponpaymentversion_id
    description: int, foreign key to ecommerce_couponpaymentversion for orders that
      use a coupon
  - name: order_tax_country_code
    description: string, the country code where the tax was applied
  - name: order_tax_rate
    description: numeric, the tax rate to apply
  - name: order_tax_rate_name
    description: string, name of the tax rate assessed
  - name: order_tax_amount
    description: numeric, the amount of tax paid
  - name: order_total_price_paid_plus_tax
    description: numeric, total order amount plus the amount of tax paid
  - name: couponpaymentversion_payment_transaction
    description: string, string that identifies the payment invoice for coupon purchases
      by companies
  - name: couponpaymentversion_coupon_type
    description: string, one of 'single-use' or 'promo'. Promo coupon codes can be
      used multiple times
  - name: couponpaymentversion_discount_source
    description: string, one of "staff", "marketing", "credit_card", "purchase_order",
      "sales". "staff" coupons are used to allow staff to enroll in courses. "marketing"
      coupons are promos for discounts generated by marketing. "credit_card", "purchase_order"
      and "sales" correspond to different ways that companies can pay for vouchers
      for their employees to enroll in courses or programs.
  - name: couponpaymentversion_discount_type
    description: one of percent-off or dollars-off
  - name: couponpaymentversion_discount_amount
    description: number, either dollar amount or percentage (between 0 and 1) discount
  - name: couponpaymentversion_discount_amount_text
    description: string, discount amount in readable format. It can be percent-off
      which is <dollar amount * 100>% off, dollars-off which is $<dollar amount> off
  - name: couponredemption_created_on
    description: timestamp, specifying when the coupon was redeemed by user for fulfilled
      or refunded orders
  - name: receipt_reference_number
    description: str, transaction reference number from cybersource payment
  - name: receipt_transaction_id
    description: str, transaction identifier from cybersource payment.
  - name: receipt_payment_method
    description: str, payment method from cybersource payment. Value could be 'paypal'
      or 'card' if payment is not cancelled
  - name: receipt_authorization_code
    description: str, authorization code from cybersource payment
  - name: receipt_bill_to_address_state
    description: str, address state from cybersource payment
  - name: receipt_bill_to_address_country
    description: str, address country from cybersource payment
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_order')
- name: int__mitxpro__ecommerce_linerunselection
  description: The course runs the user selected when purchsing the courseware object.
    If the courseware object is a course run, there is one ecommerce_line_run_selection
    record. If the courseware object is a program, there will be a record for each
    course run from the program that is selected by the user
  columns:
  - name: linerunselection_id
    description: int, primary key representing a line course run selection
    tests:
    - not_null
    - unique
  - name: linerunselection_created_on
    description: timestamp, specifying when the line course run selection was initially
      created
  - name: linerunselection_updated_on
    description: timestamp, specifying when the line course run selection was most
      recently updated
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key in courses_courserun
    tests:
    - not_null
  - name: line_id
    description: int, primary key in ecommerce_line
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["line_id", "courserun_id"]
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_linerunselection')
- name: int__mitxpro__ecommerce_line
  columns:
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - unique
    - not_null
  - name: order_id
    description: int, foreign key in the orders_order table for the order that contains
      the line
    tests:
    - not_null
  - name: line_created_on
    description: timestamp, specifying when the line was initially created
  - name: line_updated_on
    description: timestamp, specifying when the line was most recently updated
  - name: product_id
    description: int, foreign key in the ecommerce_product table.
    tests:
    - not_null
  - name: productversion_id
    description: int, foreign key in the ecommerce_productversion table. Versioned
      product
    tests:
    - not_null
  - name: product_price
    description: numeric, product price for this order line
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key representing a single xPro course run
  - name: program_id
    description: int, primary key representing a single xPro program
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
  - name: product_type
    description: string, readable product type
    tests:
    - not_null
  - name: programrun_id
    description: int, primary key representing a single MITxPro program run
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_line')
- name: int__mitxpro__ecommerce_productversion
  columns:
  - name: productversion_id
    description: int, primary key representing an ecommerce product version
    tests:
    - not_null
    - unique
  - name: productversion_created_on
    description: timestamp, specifying when the product version was initially created
    tests:
    - not_null
  - name: productversion_updated_on
    description: timestamp, specifying when the product version was most recently
      updated
    tests:
    - not_null
  - name: productversion_price
    description: numeric, the product price for this version
    tests:
    - not_null
  - name: productversion_description
    description: string, product version discriptiom
    tests:
    - not_null
  - name: product_id
    description: int, primary key in ecommerce_product
    tests:
    - not_null
  - name: productversion_readable_id
    description: string, the readable_id field from the product object
  - name: productversion_requires_enrollment_code
    description: boolean, true if the learner is required to enter an enrollment code
      to enroll in the course or program at the checkout
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_productversion')

- name: int__mitxpro__ecommerce_product
  description: Intermediate model of xPro Products.
  columns:
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - not_null
    - unique
  - name: product_is_active
    description: boolean, whether the product is purchasable
    tests:
    - not_null
  - name: product_created_on
    description: timestamp, the timestamp the product was created
  - name: product_updated_on
    description: timestamp, the timestamp the product was last updated
  - name: product_is_private
    description: boolean, Public product is purchasable through the bulk form at /ecommerce/bulk
    tests:
    - not_null
  - name: product_list_price
    description: numeric, the latest list price for the product.
    tests:
    - not_null
  - name: product_description
    description: str, product description from the latest product version
  - name: courserun_id
    description: int, primary key representing a single xPro course run
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
  - name: program_id
    description: int, primary key representing a single xPro program
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
  - name: product_type
    description: string, readable product type
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single xPro course
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["product_type", "program_id", "courserun_id"]
      row_condition: "product_is_active"
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__ecommerce_product')
- name: int__mitxpro__courserunenrollments
  description: Intermediate model of enrollments in xPro
  columns:
  - name: courserunenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: courserunenrollment_enrollment_mode
    description: str, indicating what kind of enrollment this is. Possible values
      are audit or no-id-professional. For 'audit' enrollments on edx platform, they
      are populated as no-id-professional if there are orders associated with the
      enrollments.
    tests:
    - not_null
    - accepted_values:
        values: ['audit', 'no-id-professional']
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
    tests:
    - not_null
  - name: courserun_start_on
    description: timestamp, date and time when the course starts
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
  - name: user_full_name
    description: str, the user's full name
    tests:
    - not_null
  - name: user_address_country
    description: str, country code for the user's address
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_courserunenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id", "ecommerce_order_id"]

- name: int__mitxpro__programenrollments
  description: Intermediate model of enrollments in xPro.
  columns:
  - name: programenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the xPro platform
    tests:
    - not_null
  - name: program_id
    description: int, unique ID specifying a "run" of an xPro course
    tests:
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '', null]
  - name: program_title
    description: str, title of the course run
    tests:
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
  - name: ecommerce_order_id
    description: int, id of order associated with the payment for the enrollment
  - name: ecommerce_company_id
    description: int, id of the company associated with the payment for the enrollment
      for enrollments that are made through bulk purchases by companies
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_programenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id", "ecommerce_order_id"]
- name: int__mitxpro__platforms
  description: Intermediate model of platforms in MITxPro
  columns:
  - name: platform_id
    description: int, primary key representing a single platform
    tests:
    - unique
    - not_null
  - name: platform_name
    description: str, name of the platform
    tests:
    - unique
    - not_null

- name: int__mitxpro__programs
  description: Intermediate model of programs in MITxPro
  columns:
  - name: program_id
    description: int, primary key representing a single MITxPro program
    tests:
    - unique
    - not_null
  - name: program_is_live
    description: boolean, indicating whether the program is available to users on
      MITxPro website
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code} e.g.
      program-v1:xPRO+MLx
    tests:
    - unique
    - not_null
  - name: program_is_external
    description: boolean, whether the program is on an external platform
    tests:
    - not_null
  - name: platform_id
    description: int, id of the program platform
  - name: cms_programpage_description
    description: str, the description displayed on the page
  - name: cms_programpage_duration
    description: str, a short description indicating how long the program takes to
      complete
  - name: cms_programpage_format
    description: str, format of the program (Online, Other)
  - name: cms_programpage_subhead
    description: str, short subheading to appear below the title on the program page
  - name: cms_programpage_time_commitment
    description: str, short description indicating about the time commitments
  - name: cms_certificate_ceus
    description: str, number of continuing education units or credits offered. e.g.
      4.5
  - name: program_topics
    description: str, list of topic names for all courses in the program
  - name: program_instructors
    description: str, list of instructor names for the program
  - name: cms_programpage_catalog_details
    description: str, the description shown on the catalog page for this product
  - name: cms_programpage_slug
    description: str, used for constructing the program page’s URL.
  - name: cms_programpage_url_path
    description: str, url path for the page
  - name: cms_programpage_is_live
    description: boolean, if set to true this program page is published
  - name: cms_programpage_first_published_on
    description: timestamp, date and time when the program page was first published
  - name: cms_programpage_last_published_on
    description: timestamp, date and time when the program page was last published

- name: int__mitxpro__program_runs
  description: Intermediate model of program runs in MITxPro
  columns:
  - name: programrun_id
    description: int, primary key representing a single MITxPro program run
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single MITxPro
      program
    tests:
    - not_null
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: programrun_tag
    description: str, string that identifies a single run in a program e.g. R0
    tests:
    - not_null
  - name: programrun_start_on
    description: timestamp, specifying when the program run begins
  - name: programrun_end_on
    description: timestamp, specifying when the program run ends
  - name: short_program_code
    description: str, a short portion of the readable program id that contains the
      program code. Examples include ML, QCF, AIPS, and DSBD.
  - name: programrun_readable_id
    description: str, unique program run ID formatted as program-v1:{org}+{program
      code}+{run_tag} e.g. program-v1:xPRO+MLx+R1
    tests:
    - unique
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_programrun')

- name: int__mitxpro__courses
  description: Intermediate model of courses in MITxPro
  columns:
  - name: course_id
    description: int, primary key representing a single MITxPro course
    tests:
    - unique
    - not_null
  - name: program_id
    description: id, foreign key to courses_program
  - name: course_is_live
    description: boolean, indicating whether the course is available to users on MITxPro
      website
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
  - name: course_readable_id
    description: str, Open edX ID formatted as course-v1:{org}+{course code} e.g.
      course-v1:xPRO+MLx2
    tests:
    - unique
    - not_null
  - name: course_is_external
    description: boolean, whether the course is on an external platform
    tests:
    - not_null
  - name: short_program_code
    description: str, a short portion of the readable course id that contains the
      program code. Examples include ML, QCF, AIPS, and DSBD.
  - name: platform_id
    description: int, id of the course platform
  - name: cms_coursepage_description
    description: str, the description displayed on the page
  - name: cms_coursepage_duration
    description: str, a short description indicating how long the course takes to
      complete (e.g. '4 weeks')
  - name: cms_coursepage_format
    description: str, format of the course (Online, Other)
  - name: cms_coursepage_subhead
    description: str, short subheading to appear below the title on the course page
  - name: cms_coursepage_time_commitment
    description: str, short description indicating about the time commitments
  - name: cms_coursepage_catalog_details
    description: str, the description shown on the catalog page for this product
  - name: cms_certificate_ceus
    description: str, number of continuing education units or credits offered. e.g.
      4.5
  - name: course_topics
    description: str, list of topic names for a course.
  - name: course_instructors
    description: str, list of instructor names for a course.
  - name: cms_coursepage_slug
    description: str, used for constructing the course page’s URL.
  - name: cms_coursepage_url_path
    description: str, url path for the page
  - name: cms_coursepage_is_live
    description: boolean, if set to true this course page is published
  - name: cms_coursepage_first_published_on
    description: timestamp, date and time when the course page was first published
  - name: cms_coursepage_last_published_on
    description: timestamp, date and time when the course page was last published

- name: int__mitxpro__course_runs
  description: Intermediate model of course runs in MIT xPro.
  columns:
  - name: courserun_id
    description: int, primary key representing a single MITxPro course run
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single MITxPro
      course
    tests:
    - not_null
  - name: courserun_is_live
    description: boolean, indicating whether the course run is available to users
      on MITxPro website
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_tag
    description: str, string that identifies a single run in a course e.g. R0
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
      e.g. course-v1:xPRO+MLx1+R0
    tests:
    - unique
    - not_null
  - name: courserun_edx_readable_id
    description: str, The edx course ID of the course run in the format as {org}/{course}/{run}.
      it can be used to match courserun_readable_id in int__edxorg__mitx_courseruns
    tests:
    - unique
    - not_null
  - name: courserun_url
    description: str, url location for the course run on MITxPro website
  - name: courserun_start_on
    description: timestamp, specifying when the course begins
  - name: courserun_end_on
    description: timestamp, specifying when the course ends
  - name: courserun_enrollment_start_on
    description: timestamp, specifying when enrollment starts
  - name: courserun_enrollment_end_on
    description: timestamp, specifying when enrollment ends

- name: int__mitxpro__users
  description: Intermediate model of users in MIT xPro.
  columns:
  - name: user_id
    description: int, unique id assigned to the user
    tests:
    - unique
    - not_null
  - name: openedx_user_id
    description: int, foreign key to open edX users. Null for most inactive app users.
    tests:
    - unique
  - name: user_username
    description: string, username
    tests:
    - unique
    - not_null
  - name: user_full_name
    description: string, full name
    tests:
    - not_null
  - name: user_email
    description: string, email
    tests:
    - unique
    - not_null
  - name: user_joined_on
    description: timestamp, user join timestamp
  - name: user_last_login
    description: timestamp, user last log in
  - name: user_address_country
    description: str, country code for the user's address
  - name: user_vat_id
    description: str, Value-Added Tax Identification number of the user
  - name: user_is_active
    description: boolean, indicating if user is active or not
  - name: user_street_address
    description: str, user street address
  - name: user_address_city
    description: str, user city
  - name: user_address_state_or_territory
    description: str, user state or territory
  - name: user_address_postal_code
    description: str, user postal code
  - name: user_gender
    description: str, user gender. May be null if user didn't specify.
    tests:
    - accepted_values:
        values: ['Male', 'Female', 'Other/Prefer Not to Say', '']
  - name: user_birth_year
    description: int, user birth year
  - name: user_company
    description: str, user company
  - name: user_job_title
    description: str, user job title
  - name: user_industry
    description: str, user job industry
  - name: user_job_function
    description: str, user job function
  - name: user_company_size
    description: str, company size
    tests:
    - accepted_values:
        values: ['Small/Start-up (1+ employees)', 'Small/Home office (1-9 employees)',
          'Small (10-99 employees)', 'Small to medium-sized (100-999 employees)',
          'Medium-sized (1000-9999 employees)', 'Large Enterprise (10,000+ employees)',
          "Other (N/A or Don''t know)"]
  - name: user_years_experience
    description: str, years experience
    tests:
    - accepted_values:
        values: ['Less than 2 years', '2-5 years', '6 - 10 years', '11 - 15 years',
          '16 - 20 years', 'More than 20 years', 'Prefer not to say']
  - name: user_leadership_level
    description: str, user leadership level
  - name: user_highest_education
    description: str, user highest education
    tests:
    - accepted_values:
        values: '{{ var("highest_education_values") }}'
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__users_user')

- name: int__mitxpro__courserun_grades
  description: Intermediate model for mitxpro course run grades
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MIT xPro grade record
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: courserun_url
    description: str, url location for the course run in MIT xPro
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
  - name: courserungrade_created_on
    description: timestamp, specifying when a grade was initially created
  - name: courserungrade_updated_on
    description: timestamp, specifying when a grade was most recently updated
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxpro__users')
        field: user_id
  - name: user_username
    description: str, username
    tests:
    - not_null
  - name: user_email
    description: str, email
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_courserungrade')

- name: int__mitxpro__courserun_certificates
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MIT xPro course certificate
      record
    tests:
    - unique
    - not_null
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
  - name: courseruncertificate_url
    description: str, the full URL to the certificate on MIT xPro if it's not revoked
    tests:
    - unique
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  - name: courseruncertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: courseruncertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: courserun_url
    description: str, url location for the course run in MIT xPro
  - name: user_username
    description: str, username
    tests:
    - not_null
  - name: user_email
    description: str, email
    tests:
    - not_null
  - name: user_full_name
    description: str, the user's full name
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_courseruncertificate')

- name: int__mitxpro__program_certificates
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MIT xPro program certificate
      record
    tests:
    - unique
    - not_null
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  - name: programcertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: programcertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code}
    tests:
    - not_null
  - name: user_username
    description: str, username
    tests:
    - not_null
  - name: user_email
    description: str, email
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__app__postgres__courses_programcertificate')

- name: int__mitxpro__coursetopic
  columns:
  - name: coursetopic_id
    description: int, primary key representing a single MITxPro course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - unique
    - not_null
  - name: coursetopic_created_on
    description: timestamp, specifying when a course topic was initially created
  - name: coursetopic_updated_on
    description: timestamp, specifying when a course topic was most recently updated
  - name: coursetopic_parent_coursetopic_id
    description: int, id for the parent coursetopic for subtopics. For example 'Technology'
      is the parent topic for 'Technology:Data Science'

- name: int__mitxpro__user_courseactivities
  description: xPro open edX user activities aggregated statistics per course from
    tracking logs
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, either from openedx_user_id in open edX users table, or from
      tracking logs if no openedx_user_id based on username match
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}.
    tests:
    - not_null
  - name: courseactivity_num_events
    description: int, number of tracking log events
    tests:
    - not_null
  - name: courseactivity_num_days_activity
    description: int, number of days with activity
    tests:
    - not_null
  - name: courseactivity_first_event_timestamp
    description: timestamp, timestamp of user's first event within a course
    tests:
    - not_null
  - name: courseactivity_last_event_timestamp
    description: timestamp, timestamp of user's last event within a course
    tests:
    - not_null
  - name: courseactivity_num_play_video
    description: int, number of play_video events
  - name: courseactivity_num_unique_play_video
    description: int, number of unique videos played within a course
  - name: courseactivity_last_play_video_timestamp
    description: timestamp, timestamp of user's last play_video event within a course
  - name: courseactivity_last_problem_check_timestamp
    description: timestamp, timestamp of user's last problem_check event within a
      course
  - name: courseactivity_num_chapters_visited
    description: int, number of unique chapters visited within a course
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id"]

- name: int__mitxpro__user_courseactivity_video
  description: It tracks xPro open edX users video activities within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table for that user_username.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The values are either browser or mobile for this event
    tests:
    - not_null
  - name: useractivity_event_type
    description: >
      str, type of video event triggered. e.g. play_video, pause_video, stop_video,
      complete_video, etc.
      A list of video events can be found https://edx.readthedocs.io/projects/devdata/en/latest/
      internal_data_formats/tracking_logs/student_event_types.html#video-interaction-events
    tests:
    - not_null
  - name: useractivity_page_url
    description: str, url of the page the user was visiting when the event was emitted.
  - name: useractivity_video_id
    description: str, hash code for the video being watched. This value is the last
      part of coursestructure_block_id string
    tests:
    - not_null
  - name: useractivity_video_duration
    description: float, The length of the video file, in seconds. This is extracted
      from event field in tracking log.
  - name: useractivity_video_currenttime
    description: number, The time in the video when this event was emitted
  - name: useractivity_video_old_time
    description: number, time in the video, in seconds, at which the user chose to
      go to a different point in time for seek_video event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'seek_video'"
  - name: useractivity_video_new_time
    description: number, time in the video, in seconds, that the user selected as
      the destination point for seek_video event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'seek_video'"
  - name: useractivity_video_new_speed
    description: number, new speed that the user selected for the video to play for
      speed_change_video event. e.g. 0.75, 1.0, 1.25, 1.50.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'speed_change_video'"
  - name: useractivity_video_old_speed
    description: number, old speed at which the video was playing for speed_change_video
      event.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'speed_change_video'"
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null

- name: int__mitxpro__user_courseactivity_problemcheck
  description: It tracks xPro open edX users problem_check activities within a course.
    Some events from 2019 don't have nanosecond in their timestamp, if learners had
    problem check events during those periods, use problem_attempts, problem_success
    or other fields to gauge which one happens first
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, reference user id in auth_user from open edX.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, problem_check - when a problem is successfully checked.
    tests:
    - not_null
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course. It's recorded as a URL
      format - block-v1:{org)+{course ID}+type@problem+block@{hash code}
    tests:
    - not_null
  - name: useractivity_problem_name
    description: str, display name of this problem in a course
    tests:
    - not_null
  - name: useractivity_problem_student_answers
    description: json, student answers to this problem in problem_id and internal
      answer pair. For multiple questions, it lists every question and answer.
    tests:
    - not_null
  - name: useractivity_problem_attempts
    description: number, The number of times the user attempted to answer this problem
    tests:
    - not_null
  - name: useractivity_problem_success
    description: str, It's either 'correct' or 'incorrect'
    tests:
    - not_null
  - name: useractivity_problem_current_grade
    description: number, current grade value for this user
    tests:
    - not_null
  - name: useractivity_problem_max_grade
    description: number, Maximum possible grade value for this problem
    tests:
    - not_null
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_problem_id",
        "useractivity_problem_attempts", "useractivity_problem_success", "useractivity_timestamp"]

- name: int__mitxpro__courses_to_topics
  columns:
  - name: course_id
    description: int, primary key in the courses_course table
    tests:
    - not_null
  - name: coursetopic_id
    description: int, primary key in courses_coursetopic
    tests:
    - not_null
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - not_null
  - name: coursetopic_parent_coursetopic_id
    description: int, id for the parent coursetopic for subtopics. For example 'Technology'
      is the parent topic for 'Technology:Data Science'
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "coursetopic_id"]

- name: int__mitxpro__coursesinprogram
  description: MIT xPro courses in programs. stg__mitxpro__app__postgres__cms_coursesinprogrampage
    contains other lists as well, such as upcoming courses and programs, but this
    table is just courses in programs
  columns:
  - name: course_id
    description: int, primary key in the courses_course table
    tests:
    - not_null
  - name: program_id
    description: int, primary key in courses_program
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "program_id"]

- name: int__mitxpro__coursesfaculty
  columns:
  - name: course_id
    description: int, primary key in the courses_course table
    tests:
    - not_null
  - name: cms_facultymemberspage_facultymember_name
    description: str,faculty member name
    tests:
    - not_null
  - name: cms_facultymemberspage_facultymember_description
    description: str,faculty member name
    tests:
    - not_null

- name: int__mitxpro__programsfaculty
  columns:
  - name: program_id
    description: int, primary key in the courses_program table
    tests:
    - not_null
  - name: cms_facultymemberspage_facultymember_name
    description: str,faculty member name
    tests:
    - not_null
  - name: cms_facultymemberspage_facultymember_description
    description: str,faculty member name
    tests:
    - not_null

- name: int__mitxpro__course_structure
  description: This table contains historical changes to xPro's course content.
  columns:
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:xPro+{course code}+{run_tag}
    tests:
    - not_null
  - name: coursestructure_content_hash
    description: str, sha256 hashed string of the course content.
    tests:
    - not_null
  - name: coursestructure_block_content_hash
    description: str, sha256 hashed string of the block content in a course
    tests:
    - not_null
  - name: coursestructure_block_id
    description: str, Unique ID for a distinct piece of content in a course, formatted
      as block-v1:xPro+{course}+{run}type@{block type}+block@{hash code}
    tests:
    - not_null
  - name: coursestructure_parent_block_id
    description: str, parent block ID, same format as block_id
  - name: coursestructure_block_index
    description: int, sequence number giving order in which this block content appears
      within the course
    tests:
    - not_null
  - name: coursestructure_block_category
    description: str, category/type of the block, it identifies core structural elements
      of a course. Value includes but not limited to course, chapter, sequential,
      vertical, discussion, html, problem, video, etc.
    tests:
    - not_null
  - name: coursestructure_block_title
    description: str, title of the block extracted from the metadata of the block.
      This field comes from name field for the section, subsection, or unit on the
      Studio 'Course Outline' page.
  - name: coursestructure_block_metadata
    description: str, json string of the metadata field for the block. It provides
      additional information about this block, different block type may have different
      member fields inside metadata.
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course extracted from the metadata of 'course'
      block
  - name: courserun_start_on
    description: timestamp, indicating when the course run starts extracted from the
      metadata of 'course' block
  - name: coursestructure_retrieved_at
    description: timestamp, indicating when this course structure was initially retrieved
      from REST API.
    tests:
    - not_null
  - name: coursestructure_chapter_id
    description: str, block id of chapter within which this child block belongs to.
      Null for the 'course' block as it's the top block that doesn't belong to any
      chapter.
  - name: coursestructure_chapter_title
    description: str, title of chapter within which this child block belongs to.
  - name: coursestructure_is_latest
    description: boolean, indicating if the course content is the latest version
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxpro__openedx__api__course_structure')

- name: int__mitxpro__user_courseactivity_discussion
  description: MIT xPro learners discussion forum interaction within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:xPro+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The value is server for the discussion events.
    tests:
    - not_null
  - name: useractivity_event_type
    description: >
      str, type of discussion forum event triggered. Values can be edx.forum.comment.created,
      edx.forum.comment.edited, edx.forum.response.created, edx.forum.response.voted,
      edx.forum.thread.created, edx.forum.thread.viewed, edx.forum.thread.voted, edx.forum.searched,
      etc.
      A list of discussion events can be found https://edx.readthedocs.io/projects/devdata/en/latest/
      internal_data_formats/tracking_logs/student_event_types.html#discussion-forum-events
    tests:
    - not_null
  - name: useractivity_path
    description: str, relative url path of page that generated this discussion event.
      e.g. for edx.forum.response.voted events, it indicates if this event is unvote
      or upvote
  - name: useractivity_discussion_post_id
    description: str, unique identifier for the discussion post learner engaged in.
      May be Null for edx.forum.searched event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type != 'edx.forum.searched'"
  - name: useractivity_discussion_post_title
    description: str, title for the specific discussion post. May be Null for edx.forum.searched
      event.
  - name: useractivity_discussion_block_id
    description: str, identifier for the specific discussion component. e.g. discussion_ps2A-tab5.
      Value is the last part of 'coursestructure_block_id' string. May be Null for
      edx.forum.searched event.
  - name: useractivity_discussion_block_name
    description: str, display name for the specific discussion component. This value
      consists of the unit name and 'coursestructure_block_title' of this discussion
      component.
  - name: useractivity_discussion_page_url
    description: str, URL of the page from which the discussion thread can be viewed.
  - name: useractivity_discussion_search_query
    description: str, the query text searched by the learner on the course discussion
      page. Applicable for edx.forum.searched event.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'edx.forum.searched'"
  - name: useractivity_discussion_roles
    description: >
      array, Identifies a user who doesn't have discussion management privileges
      as a 'Student', or a user who has discussion management privileges as a course
      'Community TA', 'Moderator', or 'Administrator'.
      The value of role refers to name field in django_comment_client_role_users.
      https://edx.readthedocs.io/projects/devdata/en/latest/internal_data_formats/sql_schema.html#id12
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_event_type",
        "useractivity_discussion_post_id", "useractivity_path", "useractivity_timestamp"]

- name: int__mitxpro__user_courseactivity_problemsubmitted
  description: MIT xPro learners problem submission activities within a course
  columns:
  - name: useractivity_event_id
    description: str, The unique identifier for tracing this problem submitted event
    tests:
    - not_null
    - unique
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:xPro+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The value is server for this event.
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, edx.grades.problem.submitted - when a problem is submitted and
      successfully saved
    tests:
    - not_null
  - name: useractivity_path
    description: str, relative url path of page that generated the problem submitted
      event.
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course, formatted as block-v1:xPro+{course
      ID}+type@problem+block@{hash code}.
    tests:
    - not_null
  - name: useractivity_problem_name
    description: str, display name of this problem in a course
  - name: useractivity_problem_weight
    description: number, the weight of this problem
  - name: useractivity_problem_earned_score
    description: str, learner’s weighted score for this problem.
  - name: useractivity_problem_max_score
    description: number, weighted maximum possible score for this problem.
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null

- name: int__mitxpro__user_courseactivity_showanswer
  description: MIT xPro learners show answer events within a course
  columns:
  - name: user_username
    description: str, username of the open edX user
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:xPro+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_path
    description: str, relative url path of page when the answer to a problem is shown
      event.
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course, formatted as block-v1:xPro+{course
      ID}+type@problem+block@{hash code}.
    tests:
    - not_null
  - name: useractivity_timestamp
    description: timestamp, time for this show answer event
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_problem_id",
        "useractivity_timestamp"]

- name: int__mitxpro__user_courseactivities_daily
  description: MIT xPro daily aggregate learner activities within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:xPro+{course code}+{run_tag}.
    tests:
    - not_null
  - name: courseactivity_num_events
    description: int, number of tracking log events (including all course activities)
    tests:
    - not_null
  - name: courseactivity_date
    description: date, date that user has any kind of activities in the course
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "courseactivity_date"]

- name: int__mitxpro__courserun_videos
  description: course videos on MIT xPro open edx
  columns:
  - name: courserun_readable_id
    description: str, open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: coursevideo_is_hidden
    description: boolean, indicating if the video is hidden for the course.
    tests:
    - not_null
  - name: video_edx_uuid
    description: str, hashed ID for the edx video
    tests:
    - not_null
  - name: video_client_id
    description: str, human readable name for video. e.g. TTSBSV3_Web3_BVB_FINAL.mp4
  - name: video_status
    description: str, values are external, imported, file_complete, and upload_failed.
    tests:
    - not_null
  - name: video_duration
    description: float, the length of the video, in seconds. Populated with data from
      ODL Video Service (OVS) if the video is uploaded there. May be 0.0 for small
      amounts of videos.
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["courserun_readable_id", "video_edx_uuid"]
