---
version: 2

models:
- name: int__mitxonline__flexiblepricing_flexiblepriceapplication
  description: An application for an income based discount.
  columns:
  - name: flexiblepriceapplication_id
    description: int, primary key representing a flexible pricing application
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: flexiblepriceapplication_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: flexiblepriceapplication_updated_on
    description: timestamp, specifying when the table row was created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: flexiblepriceapplication_status
    description: string, status of the application. One of "approved", "auto-approved",
      "created", "pending-manual-approval", "denied", "reset"
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ["approved", "auto-approved", "created", "pending-manual-approval",
          "denied", "reset"]
  - name: flexiblepriceapplication_income_usd
    description: numeric, user income in usd
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_original_income
    description: numeric, user income in it's original currency
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_original_currency
    description: string, currency code of orginal income
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_country_of_income
    description: string, country code for user country of income
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_exchange_rate_timestamp
    description: timestamp, timestamp of exchange rate used to convert the original
      income to usd
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_date_documents_sent
    description: date, date that the user sent documents that prove their income
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_justification
    description: string, explanation for flexible pricing application approval or
      rejection
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: flexiblepriceapplication_country_of_residence
    description: string, country code for user country of residece
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_id
    description: int, primary key in the users_user table of the user  requesting
      flexible pricing
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courseware_type
    description: string, type of courseware that the user is applying for a discount
      for. May be either 'course' or 'program'
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ["course", "program"]

  - name: flexiblepricetier_id
    description: int, primary key in flexiblepricing_flexiblepricetier of the price
      tier the user applied for
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: course_id
    description: int, primary key in either the courses_course table courseware_type
      is "course"
    tests:
    - dbt_expectations.expect_column_to_exist
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "courseware_type = 'course'"
    - dbt_expectations.expect_column_values_to_be_null:
        row_condition: "courseware_type = 'program'"
  - name: program_id
    description: int, primary key in either the courses_course table courseware_type
      is "program"
    tests:
    - dbt_expectations.expect_column_to_exist
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "courseware_type = 'program'"
    - dbt_expectations.expect_column_values_to_be_null:
        row_condition: "courseware_type = 'course'"
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 17
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "program_id", "user_id"]
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__flexiblepricing_flexiblepriceapplication')
- name: int__mitxonline__ecommerce_transaction
  columns:
  - name: transaction_id
    description: int, primary key representing an ecommerce transaction
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: transaction_amount
    description: numeric, transaction ammount
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_id
    description: int, foreign id in the ecommerce_orders tabe for the order associated
      with the transaction
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: transaction_created_on
    description: timestamp, specifying when the transaction was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: transaction_readable_identifier
    description: string, unique identifier. Either the transaction_id from cybersource
      or a unique uuid
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: transaction_type
    description: string, transaction type, one of "refund" and "payment"
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ["refund", "payment"]
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 6
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_transaction')
- name: int__mitxonline__ecommerce_purchase
  description: Since mitxonline orders always have exactly one line, we can combine
    the ecommerce_line and ecommnerce_order tables into one intermediate table. This
    may change at some point in the future (xpro orders have multiple lines). If it
    does, the unique test on order_id in this model will fail and we will know to
    change this query and the queries that depend on it
  columns:
  - name: order_id
    description: int, primary key representing a single MITx Online order.  Currently
      orders have exactly one line
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: order_state
    description: string, order state. Options are "pending", "fulfilled", "canceled"
      "declined", "errored", "refunded", "review", "partially_refunded"
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ["pending", "fulfilled", "canceled", "declined", "errored", "refunded",
          "review", "partially_refunded"]
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_reference_number
    description: string, readable id for the order. Shared with micromasters
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_username
    description: string, username of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_full_name
    description: string, full name of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: string, email of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: product_version_id
    description: int. Versioned product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: product_type
    description: string, readable product type
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ['course run', 'program run']
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_id
    description: int, primary key representing a single MITx Online program run
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 16
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_line')
- name: int__mitxonline__ecommerce_order
  description: Intermediate model of MITx Online orders.
  columns:
  - name: order_id
    description: int, primary key representing a single MITx Online order
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - unique
  - name: order_state
    description: string, order state. Options are "pending", "fulfilled", "canceled"
      "declined", "errored", "refunded", "review", "partially_refunded"
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ["pending", "fulfilled", "canceled", "declined", "errored", "refunded",
          "review", "partially_refunded"]
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: order_purchaser_user_id
    description: int, primary key in users_user for the purchaser
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_reference_number
    description: string, readable id for the order. Shared with micromasters
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: order_total_price_paid
    description: number, total order amount
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: order_purchaser_username
    description: string, username of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: order_purchaser_full_name
    description: string, full name of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: order_purchaser_email
    description: string, email of purchaser
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 9
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_order')
- name: int__mitxonline__ecommerce_product
  description: Intermediate model of MITx Online Products.
  columns:
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - not_null
    - unique
    - dbt_expectations.expect_column_to_exist
  - name: product_price
    description: numeric, the price of the product
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: product_is_active
    description: boolean, whether the product is visible in the app
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: product_description
    description: string, the product description, usually the readable_id from the
      courses_course table
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programrun_id
    description: int, primary key representing a single MITx Online program run
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: product_created_on
    description: timestamp, the timestamp the product was created
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: product_type
    description: string, readable product type
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ['course run', 'program run']
  - name: course_id
    description: int, foreign key to courses_course representing a single MITx Online
      course
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: program_id
    description: int, foreign key to courses_program representing a single MITx Online
      program
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 10
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["product_type", "programrun_id", "courserun_id"]
      row_condition: "product_is_active"
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_product')
- name: int__mitxonline__courserunenrollments
  description: Intermediate model of enrollments in MITx Online.
  columns:
  - name: courserunenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
    - dbt_expectations.expect_column_to_exist
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: courserunenrollment_enrollment_mode
    description: str, enrollment mode for user
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '']
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 10
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courserunenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]
- name: int__mitxonline__programenrollments
  description: Intermediate model of enrollments in MITx Online.
  columns:
  - name: programenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
    - dbt_expectations.expect_column_to_exist
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: program_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
  - name: programenrollment_enrollment_mode
    description: str, enrollment mode for user
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - dbt_expectations.expect_column_to_exist
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '']
  - name: program_title
    description: str, title of the course run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 10
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courserunenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id"]

- name: int__mitxonline__course_to_topics
  description: Intermediate model for MITxOnline course to topics
  columns:
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 2
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coursetopic_name", "course_id"]

- name: int__mitxonline__courserun_grades
  description: Intermediate model for MITxOnline course run grades
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MITxOnline grade record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_courserun')
        field: courserun_id
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_url
    description: str, url location for the course run in MITx Online
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: user_username
    description: string, username
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: string, email
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courserungrade')

- name: int__mitxonline__courserun_certificates
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MITxOnline course certificate
      record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_courserun')
        field: courserun_id
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: courserun_url
    description: str, url location for the course run in MITx Online
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: string, username
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: string, email
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courseruncertificate')

- name: int__mitxonline__program_to_courses
  description: intermediate table contains information about program to courses relationship
    that derived from programrequirement
  columns:
  - name: programrequirement_id
    description: int, foreign key to programrequirements
    tests:
    - dbt_expectations.expect_column_to_exist
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses representing a single course
    tests:
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: program_id
    description: int, foreign key to programs representing a single program
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_program')
        field: program_id
  - name: programrequirement_type
    description: str, indicating the courses is either required or elective
    tests:
    - dbt_expectations.expect_column_to_exist
    - not_null
    - accepted_values:
        values: ["Required Courses", "Elective Courses"]
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 4

- name: int__mitxonline__program_certificates
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MITxOnline program certificate
      record
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_program')
        field: program_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code}
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: string, username
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: string, email
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_programcertificate')

- name: int__mitxonline__users
  description: denormalized mitxonline users
  columns:
  - name: user_id
    description: int, primary key
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_username
    description: string, username
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_full_name
    description: string, full name
    tests:
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_email
    description: string, email
    tests:
    - unique
    - not_null
    - dbt_expectations.expect_column_to_exist
  - name: user_joined_on
    description: timestamp, user join timestamp
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_last_login
    description: timestamp, user last log in
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_address_country
    description: string, country code for the user's address
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_is_active
    description: boolean, indicating if user is active or not
    tests:
    - dbt_expectations.expect_column_to_exist
  - name: user_micromasters_profile_id
    description: int, foreign key to profiles_profile in MicroMasters
    tests:
    - dbt_expectations.expect_column_to_exist
  tests:
  - dbt_expectations.expect_table_column_count_to_equal:
      value: 9
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__users_user')
