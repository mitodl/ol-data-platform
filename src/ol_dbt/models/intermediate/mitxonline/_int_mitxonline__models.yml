---
version: 2

models:
- name: int__mitxonline__bulk_email_optin
  columns:
  - name: openedx_user_id
    description: int, unique ID for each user on the MITx Online open edX platform
    tests:
    - not_null
  - name: user_full_name
    description: str, user full name
  - name: user_username
    description: str, name chosen by user and used for login
  - name: user_email
    description: str, user email associated with their account
  - name: courserun_readable_id
    description: string, unique ID representing a single MITx Online course run
  - name: courserun_title
    description: str, title of the course run
  - name: email_opted_in
    description: int, if this field is 0 then we've recieved an email optout otherwise
      it will be 1

- name: int__mitxonline__ecommerce_basketdiscount
  columns:
  - name: basketdiscount_id
    description: int, primary key representing a discount in a user's basket
  - name: basketdiscount_created_on
    description: timestamp, specifying when the basket discount was initially created
  - name: basketdiscount_updated_on
    description: timestamp, specifying when the basket discount was most recently
      updated
  - name: basketdiscount_applied_on
    description: timestamp, specifying when the discount was applied to the basket
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: user_id
    description: int, foreign key referencing users_user
  - name: discount_id
    description: int, foreign key referencing ecommerce_discount

- name: int__mitxonline__ecommerce_basketitem
  columns:
  - name: basketitem_id
    description: int, primary key representing a item in a user's basket
  - name: basketitem_created_on
    description: timestamp, specifying when the basket item was initially created
  - name: basketitem_updated_on
    description: timestamp, specifying when the basket item was most recently updated
  - name: basketitem_quantity
    description: int, quantitiy of the item. Always 1
  - name: basket_id
    description: int, foreign key referencing ecommerce_basket
  - name: product_id
    description: int, foreign key referencing ecommerce_product
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_basketitem')
- name: int__mitxonline__ecommerce_basket
  description: Checkout basket that contains courseware that a users wants to purchase
    but has not purchased yet
  columns:
  - name: basket_id
    description: int, primary key representing a user basket
  - name: basket_created_on
    description: timestamp, specifying when the basket was initially created
  - name: basket_updated_on
    description: timestamp, specifying when the basket was most recently updated
  - name: user_id
    description: int, foreign key to the users_user table
    tests:
    - unique
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_basket')
- name: int__mitxonline__flexiblepricing_flexiblepriceapplication
  description: An application for an income based discount.
  columns:
  - name: flexiblepriceapplication_id
    description: int, primary key representing a flexible pricing application
    tests:
    - not_null
    - unique
  - name: flexiblepriceapplication_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: flexiblepriceapplication_updated_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: flexiblepriceapplication_status
    description: string, status of the application. One of "approved", "auto-approved",
      "created", "pending-manual-approval", "denied", "reset"
    tests:
    - not_null
    - accepted_values:
        values: ["approved", "auto-approved", "created", "pending-manual-approval",
          "denied", "reset"]
  - name: flexiblepriceapplication_income_usd
    description: numeric, user income in usd
  - name: flexiblepriceapplication_original_income
    description: numeric, user income in it's original currency
  - name: flexiblepriceapplication_original_currency
    description: string, currency code of orginal income
  - name: flexiblepriceapplication_country_of_income
    description: string, country code for user country of income
  - name: flexiblepriceapplication_exchange_rate_timestamp
    description: timestamp, timestamp of exchange rate used to convert the original
      income to usd
  - name: flexiblepriceapplication_date_documents_sent
    description: date, date that the user sent documents that prove their income
  - name: flexiblepriceapplication_justification
    description: string, explanation for flexible pricing application approval or
      rejection
  - name: flexiblepriceapplication_country_of_residence
    description: string, country code for user country of residece
    tests:
    - not_null
  - name: user_id
    description: int, primary key in the users_user table of the user  requesting
      flexible pricing
    tests:
    - not_null
  - name: user_username
    description: string, username of the user requesting flexible pricing
    tests:
    - not_null
  - name: user_full_name
    description: string, full name of the user requesting flexible pricing
    tests:
    - not_null
  - name: user_email
    description: string, email of the user requesting flexible pricing
    tests:
    - not_null
  - name: user_address_country
    description: string, country code of the user requesting flexible pricing
  - name: courseware_type
    description: string, type of courseware that the user is applying for a discount
      for. May be either 'course' or 'program'
    tests:
    - not_null
    - accepted_values:
        values: ["course", "program"]

  - name: flexiblepricetier_id
    description: int, primary key in flexiblepricing_flexiblepricetier of the price
      tier the user applied for
  - name: discount_id
    description: int, id of ecommerce_discount associated with the flexible price
      tier
    tests:
    - not_null
  - name: discount_amount
    description: numeric, discount amount. May be a percent or dollar amount
    tests:
    - not_null
  - name: discount_type
    description: string, specify if discount amount refers to a percent of, a dollar
      amount off, or a discounted price
    tests:
    - not_null
    - accepted_values:
        values: ["percent-off", "dollars-off", "fixed-price"]
  - name: course_id
    description: int, primary key in either the courses_course table courseware_type
      is "course"
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "courseware_type = 'course'"
    - dbt_expectations.expect_column_values_to_be_null:
        row_condition: "courseware_type = 'program'"
  - name: program_id
    description: int, primary key in either the courses_course table courseware_type
      is "program"
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "courseware_type = 'program'"
    - dbt_expectations.expect_column_values_to_be_null:
        row_condition: "courseware_type = 'course'"
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["course_id", "program_id", "user_id"]
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__flexiblepricing_flexiblepriceapplication')
- name: int__mitxonline__flexiblepricing_flexiblepricetier
  columns:
  - name: flexiblepricetier_id
    description: int, primary key representing a flexible pricing tier
    tests:
    - not_null
    - unique
  - name: flexiblepricetier_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: flexiblepricetier_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: contenttype_id
    description: int, foreign key in django_contenttype for either course or program
    tests:
    - not_null
  - name: courseware_object_id
    description: int, id for the courseware object in either the courses_course or
      courses_program table
    tests:
    - not_null
  - name: flexiblepricetier_is_current
    description: boolean, whether the flexible pricing tier is currently enabled
    tests:
    - not_null
  - name: flexiblepricetier_income_threshold_usd
    description: numeric, maximum income in usd to qualify for the flexible price
      tier
    tests:
    - not_null
  - name: discount_id
    description: int, id of ecommerce_discount associated with the flexible price
      tier
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__flexiblepricing_flexiblepricetier')
- name: int__mitxonline__flexiblepricing_currencyexchangerate
  columns:
  - name: currencyexchangerate_id
    description: int, primary key representing a country exchange rate
    tests:
    - not_null
    - unique
  - name: currencyexchangerate_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: currencyexchangerate_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: currencyexchangerate_currency_code
    description: string, currency code
    tests:
    - not_null
    - unique
  - name: currencyexchangerate_exchange_rate
    description: numeric, exchange rate to usd
    tests:
    - not_null
  - name: currencyexchangerate_description
    description: string, readable currency name
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__flexiblepricing_currencyexchangerate')
- name: int__mitxonline__flexiblepricing_countryincomethreshold
  columns:
  - name: countryincomethreshold_id
    description: int, primary key representing a country income threshold
    tests:
    - not_null
    - unique
  - name: countryincomethreshold_created_on
    description: timestamp, specifying when the table row was created
    tests:
    - not_null
  - name: countryincomethreshold_updated_on
    description: timestamp, specifying when the table row was updated
    tests:
    - not_null
  - name: countryincomethreshold_country_code
    description: string, country code
    tests:
    - not_null
    - unique
  - name: countryincomethreshold_income_threshold
    description: int, usd income threshold to quantity for flexible pricing
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__flexiblepricing_countryincomethreshold')
- name: int__mitxonline__ecommerce_userdiscount
  description: This table is used to pre-apply a discount when a user checks out
  columns:
  - name: userdiscount_id
    description: int, primary key representing a discount user combo
    tests:
    - not_null
  - name: userdiscount_created_on
    description: timestamp, specifying when the discount user association was initially
      created
    tests:
    - not_null
  - name: userdiscount_updated_on
    description: timestamp, specifying when the discount user association was updated
    tests:
    - not_null
  - name: discount_id
    description: int, foreign key for ecommerce_discount
    tests:
    - not_null
  - name: user_id
    description: int, foreign key for users_user
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_userdiscount')
- name: int__mitxonline__ecommerce_discountproduct
  description: This table is used to limit dicounts to a specific product. Discounts
    which do not have a record in this table are redeemable for all products
  columns:
  - name: discountproduct_id
    description: int, primary key representing a discount product combo
    tests:
    - not_null
  - name: discountproduct_created_on
    description: timestamp, specifying when the discount product association was initially
      created
  - name: discountproduct_updated_on
    description: timestamp, specifying when the discount product association was updated
  - name: discount_id
    description: int, foreign key for ecommerce_discount
    tests:
    - not_null
  - name: product_id
    description: int, foreign key for ecommerce_product
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_discountproduct')
- name: int__mitxonline__ecommerce_discount
  columns:
  - name: discount_id
    description: int, primary key representing a discount
    tests:
    - not_null
    - unique
  - name: discount_created_on
    description: timestamp, specifying when the discount was initially created
  - name: discount_updated_on
    description: timestamp, specifying when the discount was most recently updated
  - name: discount_amount
    description: numeric, discount amount. May be a percent or dollar amount
    tests:
    - not_null
  - name: discount_type
    description: string, one of  "percent-off", "dollars-off" and "fixed-price". Specifys
      if the ammount of the discount refers to a percent of, a dollar amount off or
      a discounted price
    tests:
    - not_null
    - accepted_values:
        values: ["percent-off", "dollars-off", "fixed-price"]
  - name: discount_redemption_type
    description: string, one of  "one-time",  "one-time-per-user" and "unlimited"
    tests:
    - not_null
    - accepted_values:
        values: ["one-time", "one-time-per-user", "unlimited"]
  - name: discount_max_redemptions
    description: int, maximum times a coupon can be redeemed
  - name: discount_code
    description: string, discount code
    tests:
    - not_null
  - name: discount_source
    description: string, reason for the discount creation. Possible options are "marketing",
      "sales", "financial-assistance", "customer-support", "staff", "legacy"
    tests:
    - accepted_values:
        values: ["marketing", "sales", "financial-assistance", "customer-support",
          "staff", "legacy"]
  - name: discount_activated_on
    description: timestamp, specifying when the discount is activated
  - name: discount_expires_on
    description: timestamp, specifying when the discount is deactivated
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_discount')
- name: int__mitxonline__ecommerce_discountredemption
  columns:
  - name: discountredemption_id
    description: int, primary key representing a discount redemption
  - name: discountredemption_timestamp
    description: timestamp, specifying when the discount was redeemed by the user
  - name: user_id
    description: int, foreign key for users_user
  - name: discount_id
    description: int, foreign key for ecommerce_discount
  - name: order_id
    description: int, foreign key for ecommerce_orders
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_discountredemption')
- name: int__mitxonline__ecommerce_transaction
  columns:
  - name: transaction_id
    description: int, primary key representing an ecommerce transaction
    tests:
    - unique
    - not_null
  - name: transaction_data
    description: json, data returned from cybersource when the transaction is fulfilled
    tests:
    - not_null
  - name: transaction_amount
    description: numeric, transaction ammount
    tests:
    - not_null
  - name: order_id
    description: int, foreign id in the ecommerce_orders tabe for the order associated
      with the transaction
    tests:
    - not_null
  - name: transaction_created_on
    description: timestamp, specifying when the transaction was initially created
  - name: transaction_readable_identifier
    description: string, unique identifier. Either the transaction_id from cybersource
      or a unique uuid
    tests:
    - not_null
    - unique
  - name: transaction_type
    description: string, transaction type, one of "refund" and "payment"
    tests:
    - accepted_values:
        values: ["refund", "payment"]
  - name: transaction_status
    description: str, transaction status from user's cybersource payment. Value could
      be ACCEPT, REVIEW. May be blank for no payment required or refund.
  - name: transaction_payment_method
    description: str, payment method from cybersource Value could be 'paypal' or 'card'.
      May be blank for no payment required or refund.
  - name: transaction_authorization_code
    description: str, authorization code from cybersource payment
  - name: transaction_bill_to_address_state
    description: str, address state from cybersource payment
  - name: transaction_bill_to_address_country
    description: str, address country from cybersource payment
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_transaction')
- name: int__mitxonline__ecommerce_order
  description: Since mitxonline orders always have exactly one line, we can combine
    the ecommerce_line and ecommnerce_order tables into one intermediate table. This
    may change at some point in the future (xpro orders have multiple lines). If it
    does, the unique test on order_id in this model will fail and we will know to
    change this query and the queries that depend on it
  columns:
  - name: order_id
    description: int, primary key representing a single MITx Online order.  Currently
      orders have exactly one line
    tests:
    - not_null
    - unique
  - name: order_state
    description: string, order state. Options are "pending", "fulfilled", "canceled"
      "declined", "errored", "refunded", "review", "partially_refunded"
    tests:
    - accepted_values:
        values: ["pending", "fulfilled", "canceled", "declined", "errored", "refunded",
          "review", "partially_refunded"]
    - not_null
  - name: order_created_on
    description: timestamp, specifying when the order was initially created
  - name: order_reference_number
    description: string, readable id for the order. Shared with micromasters
    tests:
    - not_null
  - name: order_total_price_paid
    description: number, total order amount
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: user_username
    description: string, username of purchaser
    tests:
    - not_null
  - name: user_full_name
    description: string, full name of purchaser
    tests:
    - not_null
  - name: user_email
    description: string, email of purchaser
    tests:
    - not_null
  - name: line_id
    description: int, primary key representing an ecommerce line
    tests:
    - not_null
    - unique
  - name: product_version_id
    description: int. Versioned product
    tests:
    - not_null
  - name: product_price
    description: numeric, the price of the product for order line item
    tests:
    - not_null
  - name: product_type
    description: string, readable product type
    tests:
    - not_null
    - accepted_values:
        values: ['course run', 'program run']
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
  - name: programrun_id
    description: int, primary key representing a single MITx Online program run
  - name: discount_amount_text
    description: str, discount amount in readable format from the most recent coupon
      redemption for the order. It can be percent-off which is <dollar amount>% off,
      dollars-off which is $<dollar amount> off or fixed-price
  - name: discount_code
    description: str, discount code from the most recent coupon redemption for the
      order
  - name: discountredemption_timestamp
    description: timestamp, specifying when the discount was redeemed from the most
      recent coupon redemption for the order
  - name: payment_transaction_id
    description: str, unique identifier from most recent cybersource payment or UUID.
  - name: payment_authorization_code
    description: str, authorization code from most recent cybersource payment
  - name: payment_method
    description: str, payment method from most recent cybersource payment. Value could
      be 'paypal' or 'card'.
  - name: payment_bill_to_address_state
    description: str, address state from most recent cybersource payment
  - name: payment_bill_to_address_country
    description: str, address country from most recent cybersource payment
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_order')
- name: int__mitxonline__ecommerce_product
  description: Intermediate model of MITx Online Products.
  columns:
  - name: product_id
    description: int, sequential ID for ecommerce product
    tests:
    - not_null
    - unique
  - name: product_price
    description: numeric, the price of the product
    tests:
    - not_null
  - name: product_is_active
    description: boolean, whether the product is visible in the app
    tests:
    - not_null
  - name: product_description
    description: string, the product description, usually the readable_id from the
      courses_course table
    tests:
    - not_null
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
  - name: programrun_id
    description: int, primary key representing a single MITx Online program run
  - name: product_created_on
    description: timestamp, the timestamp the product was created
  - name: product_type
    description: string, readable product type
    tests:
    - not_null
    - accepted_values:
        values: ['course run', 'program run']
  - name: course_id
    description: int, foreign key to courses_course representing a single MITx Online
      course
  - name: program_id
    description: int, foreign key to courses_program representing a single MITx Online
      program
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["product_type", "programrun_id", "courserun_id"]
      row_condition: "product_is_active"
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__ecommerce_product')
- name: int__mitxonline__courserunenrollments
  description: Intermediate model of enrollments in MITx Online.
  columns:
  - name: courserunenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - not_null
  - name: course_id
    description: int, unique ID of an MITx Online course
    tests:
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: courserunenrollment_enrollment_mode
    description: str, enrollment mode for enrolled courses in MITx Online database.
      DEDP enrollments for MITx Online courses are verified in either MITx Online
      or MicroMasters orders. For DEDP runs on MITx Online in '3T2021', '1T2022',
      '2T2022', these are paid and verified in MicroMasters. For other DEDP courses
      that run on MITx Online, they are paid and verified in MITx Online
    tests:
    - not_null
    - accepted_values:
        values: ['verified', 'audit', 'honor']
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'unenrolled', maybe null
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'unenrolled']
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - not_null
  - name: courserunenrollment_platform
    description: str, indicating what platform user enrolled in the course run as
      some of edx.org enrollments were migrated from MicroMasters
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
  - name: user_edxorg_username
    description: str, username in edx.org. For the very small number of users with
      multiple edx usernames, this is the username with the latest logins
  - name: user_full_name
    description: str, user full name
    tests:
    - not_null
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - not_null
  - name: user_address_country
    description: string, country code for the user's address
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courserunenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id"]
- name: int__mitxonline__courserunenrollments_with_programs
  description: Intermediate model of enrollments in MITx Online with programs that
    the enrollment counts towards. If the course is part of multiple programs, there
    are multiple lines for the same enrollment.
  columns:
  - name: courserunenrollment_id
    description: id for enrollment
    tests:
    - not_null
  - name: courserunenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the run
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: courserun_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - not_null
  - name: course_id
    description: int, unique ID of an MITx Online course
    tests:
    - not_null
  - name: courserunenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: courserunenrollment_enrollment_mode
    description: str, enrollment mode for enrolled courses in MITx Online database.
      DEDP enrollments for MITx Online courses are verified in either MITx Online
      or MicroMasters orders. For DEDP runs on MITx Online in '3T2021', '1T2022',
      '2T2022', these are paid and verified in MicroMasters. For other DEDP courses
      that run on MITx Online, they are paid and verified in MITx Online
    tests:
    - not_null
    - accepted_values:
        values: ['verified', 'audit', 'honor']
  - name: courserunenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'unenrolled', maybe null
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'unenrolled']
  - name: courserunenrollment_is_edx_enrolled
    description: boolean, indicating whether the user is enrolled on edx
    tests:
    - not_null
  - name: courserunenrollment_platform
    description: str, indicating what platform user enrolled in the course run as
      some of edx.org enrollments were migrated from MicroMasters
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
  - name: user_edxorg_username
    description: str, username in edx.org. For the very small number of users with
      multiple edx usernames, this is the username with the latest logins
  - name: user_full_name
    description: str, user full name
    tests:
    - not_null
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - not_null
  - name: user_address_country
    description: string, country code for the user's address
  - name: program_title
    description: str, title of the program
  - name: mitxonline_program_id
    description: int, primary key representing the program in the MITx Online database
    tests:
    - not_null
  - name: micromasters_program_id
    description: int, primary key representing the program in the MicroMasters database
  - name: is_micromasters_program
    description: boolean, whether the program is a micromasters program
    tests:
    - not_null
  - name: is_dedp_program
    description: boolean, whether the program is a DEDP program
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "courserun_id", "mitxonline_program_id"]
- name: int__mitxonline__programenrollments
  description: Intermediate model of enrollments in MITx Online.
  columns:
  - name: programenrollment_id
    description: id for enrollment
    tests:
    - not_null
    - unique
  - name: programenrollment_is_active
    description: boolean, indicating whether the user is still enrolled in the program
    tests:
    - not_null
  - name: user_id
    description: int, unique ID for each user on the MITx Online platform
    tests:
    - not_null
  - name: program_id
    description: int, unique ID specifying a "run" of an MITx Online course
    tests:
    - not_null
  - name: programenrollment_created_on
    description: timestamp, specifying when an enrollment was initially created
    tests:
    - not_null
  - name: programenrollment_enrollment_mode
    description: str, enrollment mode for user
  - name: programenrollment_enrollment_status
    description: str, enrollment status for users whose enrollment changed. Options
      are 'deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled'
    tests:
    - accepted_values:
        values: ['deferred', 'transferred', 'refunded', 'enrolled', 'unenrolled',
          '']
  - name: program_title
    description: str, title of the course run
    tests:
    - not_null
  - name: user_username
    description: str, name chosen by user
    tests:
    - not_null
  - name: user_email
    description: str, user email associated with their account
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_programenrollment')
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_id", "program_id"]
- name: int__mitxonline__courses
  description: Intermediate model for MITxOnline courses
  columns:
  - name: course_id
    description: int, primary key representing a single MITx Online course
    tests:
    - unique
    - not_null
  - name: course_is_live
    description: boolean, indicating whether course is available to users on MITxOnline
      website
  - name: course_title
    description: str, title of the course
    tests:
    - not_null
  - name: course_readable_id
    description: str, Open edX ID formatted as course-v1:{org}+{course code}
    tests:
    - unique
    - not_null
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - unique
    - not_null

- name: int__mitxonline__course_to_topics
  description: Intermediate model for MITxOnline course to topics
  columns:
  - name: coursetopic_name
    description: str, name of a course topic
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["coursetopic_name", "course_id"]

- name: int__mitxonline__course_blockedcountries
  description: Intermediate model for MITxOnline Course Blocked countries
  columns:
  - name: blockedcountry_code
    description: str, two-letter code of a blocked country for a course
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["blockedcountry_code", "course_id"]

- name: int__mitxonline__course_runs
  description: Intermediate model for MITxOnline course runs
  columns:
  - name: courserun_id
    description: int, primary key representing a single MITx Online course run
    tests:
    - unique
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single MITx Online
      course
    tests:
    - not_null
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - unique
    - not_null
  - name: courserun_edx_readable_id
    description: str, The edx course ID of the course run in the format as {org}/{course}/{run}.
      it can be used to match courserun_readable_id in int__edxorg__mitx_courseruns
    tests:
    - unique
    - not_null
  - name: courserun_platform
    description: str, indicating whether the course runs on MITx Online or edX.org,
      those edx.org DEDP courses were migrated from MicroMasters
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: courserun_tag
    description: str, string that identifies a single run in a course E.g. 1T2022
    tests:
    - not_null
  - name: courserun_url
    description: str, url location for the course run in MITx Online
  - name: courserun_start_on
    description: timestamp, specifying when the course begins
  - name: courserun_end_on
    description: timestamp, specifying when the course ends
  - name: courserun_enrollment_start_on
    description: timestamp, specifying when enrollment starts
  - name: courserun_enrollment_end_on
    description: timestamp, specifying when enrollment ends
  - name: courserun_upgrade_deadline
    description: timestamp, specifying the date time beyond which users can not enroll
      in paid course mode
  - name: courserun_is_self_paced
    description: boolean, indicating whether users can take this course at their own
      pace and earn certificate at any time
  - name: courserun_is_live
    description: boolean, indicating whether the course run is available to users
      on MITx Online website

- name: int__mitxonline__courserun_grades
  description: Intermediate model for MITxOnline course run grades
  columns:
  - name: courserungrade_id
    description: int, primary key representing a single MITxOnline grade record
    tests:
    - unique
    - not_null
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__course_runs')
        field: courserun_id
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: courserun_platform
    description: str, indicating whether the course runs on MITx Online or edX.org
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: courserun_url
    description: str, url location for the course run in MITx Online
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__courses')
        field: course_id
  - name: courserungrade_grade
    description: float, user's grade for the course (range between 0.0 to 1.0)
    tests:
    - not_null
  - name: courserungrade_letter_grade
    description: str, letter grade defined in the edX grading policy (value may be
      'A', 'B', 'C', 'D', 'Pass', none)
  - name: courserungrade_is_passing
    description: boolean, indicating whether the user has passed the minimum passing
      score set for this course
  - name: courserungrade_created_on
    description: timestamp, specifying when a grade was initially created
  - name: courserungrade_updated_on
    description: timestamp, specifying when a grade was most recently updated
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: user_username
    description: string, username
    tests:
    - not_null
  - name: user_edxorg_username
    description: str, username in edx.org
  - name: user_full_name
    description: str, user full name
    tests:
    - not_null
  - name: user_email
    description: string, email
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courserungrade')

- name: int__mitxonline__courserun_certificates
  columns:
  - name: courseruncertificate_id
    description: int, primary key representing a single MITxOnline course certificate
      record
    tests:
    - unique
    - not_null
  - name: courseruncertificate_uuid
    description: str, unique identifier for the certificate
    tests:
    - unique
    - not_null
  - name: courseruncertificate_url
    description: str, the full URL to the certificate on MITx Online
    tests:
    - unique
  - name: courserun_id
    description: int, foreign key to courses_courserun representing a single course
      run
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__course_runs')
        field: courserun_id
  - name: courserun_platform
    description: str, indicating whether the course runs on MITx Online or edX.org,
      those edx.org DEDP courses were migrated from MicroMasters
    tests:
    - not_null
    - accepted_values:
        values: ["MITx Online", "edX.org"]
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__courses')
        field: course_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: courseruncertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  - name: courseruncertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: courseruncertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: courserun_title
    description: str, title of the course run
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: course_number
    description: str, unique string for the course. It can contain letters, numbers,
      or periods. e.g. 18.03.1x
    tests:
    - not_null
  - name: courserun_url
    description: str, url location for the course run in MITx Online
  - name: user_username
    description: string, username
    tests:
    - not_null
  - name: user_edxorg_username
    description: str, username in edx.org if applicable. For the very small number
      of users with multiple edx usernames, this is the username with the latest logins
  - name: user_email
    description: string, email
    tests:
    - not_null
  - name: user_full_name
    description: str, user full name
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_courseruncertificate')

- name: int__mitxonline__programs
  columns:
  - name: program_id
    description: int, primary key representing a single MITx Online program
    tests:
    - unique
    - not_null
  - name: program_is_live
    description: boolean, indicating whether the program is available to users
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code}
    tests:
    - unique
    - not_null
  - name: program_type
    description: str, type of the program. Value is free text, it could be MicroMasters®,
      Series, etc
  - name: program_is_dedp
    description: boolean, specifying if the program is DEDP from readable_id
    tests:
    - not_null
  - name: program_is_micromasters
    description: boolean, specifying if the program is MITx MicroMasters® Program
    tests:
    - not_null

- name: int__mitxonline__program_requirements
  columns:
  - name: programrequirement_requirement_id
    description: int, primary key representing the primary key in stg__mitxonline__app__postgres__courses_programrequirement
      of the operator node
    tests:
    - not_null
  - name: course_id
    description: int, foreign key to courses_course representing a single course
    tests:
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_course')
        field: course_id
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - relationships:
        to: ref('stg__mitxonline__app__postgres__courses_program')
        field: program_id
  - name: programrequirement_type
    description: str, one of 'Elective' or 'Core'
    tests:
    - accepted_values:
        values: ["Elective", "Core"]
    - not_null
  - name: programrequirement_title
    description: str, the title of the requirement
    tests:
    - not_null
  - name: electiveset_required_number
    description: int, the number of required courses for requirements that are electives
  - name: programrequirement_is_a_nested_requirement
    description: boolean, whether the requirement is nested inside another requirement.
      For example DEDP requires the user to take 2 Elective Courses one of which must
      be An Intro Elective Course. "Elective Intro Courses" is a nested requirement
  - name: programrequirement_parent_requirement_id
    description: int, primary key representing the primary key in stg__mitxonline__app__postgres__courses_programrequirement
      of the operator node of the parent requirement for nested requirements
  - name: program_num_required_courses
    description: int, indicating the number of required courses to earn certificate
    tests:
    - not_null

- name: int__mitxonline__program_certificates
  columns:
  - name: programcertificate_id
    description: int, primary key representing a single MITxOnline program certificate
      record
    tests:
    - unique
    - not_null
  - name: programcertificate_uuid
    description: str, unique identifier for the program certificate
    tests:
    - unique
    - not_null
  - name: program_id
    description: int, foreign key to courses_program representing a single program
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__programs')
        field: program_id
  - name: user_id
    description: str, foreign key to users_user representing a single user
    tests:
    - not_null
    - relationships:
        to: ref('int__mitxonline__users')
        field: user_id
  - name: programcertificate_is_revoked
    description: boolean, indicating whether the certificate is revoked and invalid
  - name: programcertificate_created_on
    description: timestamp, specifying when a certificate was initially created
  - name: programcertificate_updated_on
    description: timestamp, specifying when a certificate was most recently updated
  - name: program_title
    description: str, title of the program
    tests:
    - not_null
  - name: program_readable_id
    description: str, Open edX ID formatted as program-v1:{org}+{program code}
    tests:
    - not_null
  - name: program_type
    description: str, type of the program. Value is free text, it could be MicroMasters®,
      Series, etc
  - name: program_is_dedp
    description: boolean, specifying if the program is DEDP from readable_id
    tests:
    - not_null
  - name: program_is_micromasters
    description: boolean, specifying if the program is MITx MicroMasters® Program
    tests:
    - not_null
  - name: user_username
    description: str, username on MITx Online
    tests:
    - not_null
  - name: user_edxorg_username
    description: str, username on edX.org
  - name: user_email
    description: str, user email on MITx Online
    tests:
    - not_null
  - name: user_full_name
    description: str, user full name on MITx Online
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__courses_programcertificate')

- name: int__mitxonline__users
  description: denormalized mitxonline users
  columns:
  - name: user_id
    description: int, primary key
    tests:
    - unique
    - not_null
  - name: openedx_user_id
    description: int, foreign key to open edX users. Not all app users have openedx_user_id
      due to username mismatch between app and open edX.
    tests:
    - unique
  - name: user_username
    description: string, username
    tests:
    - unique
    - not_null
  - name: user_full_name
    description: string, full name
    tests:
    - not_null
  - name: user_email
    description: string, email
    tests:
    - unique
    - not_null
  - name: user_joined_on
    description: timestamp, user join timestamp
  - name: user_last_login
    description: timestamp, user last log in
  - name: user_address_country
    description: string, country code for the user's address
  - name: user_address_state
    description: state code for the user's address. e.g. US-NY It's required field
      for new users, may be blank for existing users.
  - name: user_is_active
    description: boolean, indicating if user is active or not
  - name: user_micromasters_profile_id
    description: int, foreign key to profiles_profile in MicroMasters
  - name: user_edxorg_username
    description: str, username in edx.org. For the very small number of users with
      multiple edx usernames, this is the username with the latest logins
  - name: user_first_name
    description: str, first name
  - name: user_last_name
    description: str, last name
  - name: user_birth_year
    description: int, user birth year
  - name: user_company
    description: str, user company
  - name: user_job_title
    description: str, user job title
  - name: user_industry
    description: str, user job industry
  - name: user_job_function
    description: str, user job function
  - name: user_leadership_level
    description: str, user leadership level
  - name: user_gender
    description: str, user gender
    tests:
    - accepted_values:
        values: '{{ var("gender_values") }}'
  - name: user_company_size
    description: str, company size
    tests:
    - accepted_values:
        values: ['Small/Start-up (1+ employees)', 'Small/Home office (1-9 employees)',
          'Small (10-99 employees)', 'Small to medium-sized (100-999 employees)',
          'Medium-sized (1000-9999 employees)', 'Large Enterprise (10,000+ employees)',
          "Other (N/A or Don''t know)"]
  - name: user_years_experience
    description: str, years experience
    tests:
    - accepted_values:
        values: ['Less than 2 years', '2-5 years', '6 - 10 years', '11 - 15 years',
          '16 - 20 years', 'More than 20 years', 'Prefer not to say']
  - name: user_highest_education
    description: str, user highest education
    tests:
    - accepted_values:
        values: '{{ var("highest_education_values") }}'
  - name: user_type_is_student
    description: boolean, indicating if learner is identified as Student
  - name: user_type_is_professional
    description: boolean, indicating if learner is identified as Professional
  - name: user_type_is_educator
    description: boolean, indicating if learner is identified as Educator
  - name: user_type_is_other
    description: boolean, indicating if learner is identified as Other (not Professional,
      Student, or Educator)
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__app__postgres__users_user')

- name: int__mitxonline__user_courseactivity_video
  description: It tracks MITx Online open edX users video activities within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The value can only be browser for video event as MITx Online doesn't have a
      mobile app at this time.
    tests:
    - not_null
  - name: useractivity_event_type
    description: >
      str, type of video event triggered. e.g. play_video, pause_video, stop_video,
      complete_video, etc.
      A list of video events can be found https://edx.readthedocs.io/projects/devdata/en/latest/
      internal_data_formats/tracking_logs/student_event_types.html#video-interaction-events
    tests:
    - not_null
  - name: useractivity_page_url
    description: str, url of the page the user was visiting when the event was emitted.
  - name: useractivity_video_id
    description: str, hash code for the video being watched. This value is the last
      part of coursestructure_block_id string
    tests:
    - not_null
  - name: useractivity_video_duration
    description: number, The length of the video file, in seconds.
    tests:
    - not_null
  - name: useractivity_video_currenttime
    description: number, The time in the video when this event was emitted. May be
      Null for load_video or seek_video events.
  - name: useractivity_video_old_time
    description: number, time in the video, in seconds, at which the user chose to
      go to a different point in time for seek_video event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'seek_video'"
  - name: useractivity_video_new_time
    description: number, time in the video, in seconds, that the user selected as
      the destination point for seek_video event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'seek_video'"
  - name: useractivity_video_new_speed
    description: number, new speed that the user selected for the video to play for
      speed_change_video event. e.g. 0.75, 1.0, 1.25, 1.50.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'speed_change_video'"
  - name: useractivity_video_old_speed
    description: number, old speed at which the video was playing for speed_change_video
      event.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'speed_change_video'"
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null

- name: int__mitxonline__user_courseactivity_problemcheck
  description: MITx Online open edX users problem_check events emitted from server
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, problem_check - when a problem is successfully checked.
    tests:
    - not_null
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course. It's recorded as a URL
      format - block-v1:{org)+{course ID}+type@problem+block@{hash code}
    tests:
    - not_null
  - name: useractivity_problem_name
    description: str, display name of this problem in a course
    tests:
    - not_null
  - name: useractivity_problem_attempts
    description: number, The number of times the user attempted to answer this problem
    tests:
    - not_null
  - name: useractivity_problem_student_answers
    description: json, student answers to this problem in problem_id and internal
      answer pair. For multiple questions, it lists every question and answer.
    tests:
    - not_null
  - name: useractivity_problem_success
    description: str, It's either 'correct' or 'incorrect'
    tests:
    - not_null
  - name: useractivity_problem_current_grade
    description: number, current grade value for this user
    tests:
    - not_null
  - name: useractivity_problem_max_grade
    description: number, Maximum possible grade value for this problem
    tests:
    - not_null
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_problem_id",
        "useractivity_timestamp"]

- name: int__mitxonline__user_courseactivity_problemsubmitted
  description: MITx Online learners problem submission activities within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The value is server for this event.
    tests:
    - not_null
  - name: useractivity_event_type
    description: str, edx.grades.problem.submitted - when a problem is submitted and
      successfully saved
    tests:
    - not_null
  - name: useractivity_path
    description: str, relative url path of page that generated the problem submitted
      event.
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course, formatted as block-v1:{org)+{course
      ID}+type@problem+block@{hash code}.
    tests:
    - not_null
  - name: useractivity_problem_name
    description: str, display name of this problem in a course
  - name: useractivity_problem_weight
    description: number, the weight of this problem
  - name: useractivity_problem_earned_score
    description: str, learner’s weighted score for this problem.
  - name: useractivity_problem_max_score
    description: number, weighted maximum possible score for this problem.
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_problem_id",
        "useractivity_timestamp"]

- name: int__mitxonline__user_courseactivity_showanswer
  description: MITx Online learners show answer events within a course
  columns:
  - name: user_username
    description: str, username of the open edX user
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field. This id doesn't
      always match with auth_user in open edX table, there can be multiple openedx_user_ids
      for the same user_username. For those cases, use openedx_user_id from auth_user
      open edX table.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_path
    description: str, relative url path of page when the answer to a problem is shown
      event.
  - name: useractivity_problem_id
    description: str, Unique ID for this problem in a course, formatted as block-v1:{org)+{course
      ID}+type@problem+block@{hash code}.
    tests:
    - not_null
  - name: useractivity_timestamp
    description: timestamp, time for this show answer event
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_problem_id",
        "useractivity_timestamp"]

- name: int__mitxonline__user_courseactivity_discussion
  description: MITx Online learners discussion forum interaction within a course
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, open edX user ID extracted from context field
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: useractivity_event_source
    description: str, specifies the source of the interaction that triggered the event.
      The value is server for the discussion events.
    tests:
    - not_null
  - name: useractivity_event_type
    description: >
      str, type of discussion forum event triggered. Values can be edx.forum.comment.created,
      edx.forum.comment.edited, edx.forum.response.created, edx.forum.response.voted,
      edx.forum.thread.created, edx.forum.thread.viewed, edx.forum.thread.voted, edx.forum.searched,
      etc.
      A list of discussion events can be found https://edx.readthedocs.io/projects/devdata/en/latest/
      internal_data_formats/tracking_logs/student_event_types.html#discussion-forum-events
    tests:
    - not_null
  - name: useractivity_discussion_post_id
    description: str, unique identifier for the discussion post learner engaged in.
      May be Null for edx.forum.searched event
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type != 'edx.forum.searched'"
  - name: useractivity_discussion_post_title
    description: str, title for the specific discussion post. May be Null for edx.forum.searched
      event.
  - name: useractivity_discussion_block_id
    description: str, identifier for the specific discussion component. e.g. discussion_ps2A-tab5.
      Value is the last part of 'coursestructure_block_id' string. May be Null for
      edx.forum.searched event.
  - name: useractivity_discussion_block_name
    description: str, display name for the specific discussion component. This value
      consists of the unit name and 'coursestructure_block_title' of this discussion
      component.
  - name: useractivity_discussion_page_url
    description: str, URL of the page from which the discussion thread can be viewed.
  - name: useractivity_discussion_search_query
    description: str, the query text searched by the learner on the course discussion
      page. Applicable for edx.forum.searched event.
    tests:
    - dbt_expectations.expect_column_values_to_not_be_null:
        row_condition: "useractivity_event_type = 'edx.forum.searched'"
  - name: useractivity_discussion_roles
    description: >
      array, Identifies a user who doesn't have discussion management privileges
      as a 'Student', or a user who has discussion management privileges as a course
      'Community TA', 'Moderator', or 'Administrator'.
      The value of role refers to name field in django_comment_client_role_users.
      https://edx.readthedocs.io/projects/devdata/en/latest/internal_data_formats/sql_schema.html#id12
  - name: useractivity_timestamp
    description: timestamp, time when this event was emitted
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "useractivity_event_type",
        "useractivity_discussion_post_id", "useractivity_timestamp"]

- name: int__mitxonline__user_courseactivities
  description: MITx Online open edX user activities aggregated statistics per course
    from tracking logs
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: openedx_user_id
    description: int, either reference openedx_user_id in open edX users table, or
      from tracking logs if no reference found.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}.
    tests:
    - not_null
  - name: courseactivity_num_events
    description: int, number of tracking log events
    tests:
    - not_null
  - name: courseactivity_num_days_activity
    description: int, number of days with activity
    tests:
    - not_null
  - name: courseactivity_first_event_timestamp
    description: timestamp, timestamp of user's first event within a course
    tests:
    - not_null
  - name: courseactivity_last_event_timestamp
    description: timestamp, timestamp of user's last event within a course
    tests:
    - not_null
  - name: courseactivity_num_play_video
    description: int, number of play_video events
  - name: courseactivity_num_unique_play_video
    description: int, number of unique videos played within a course
  - name: courseactivity_num_chapters_visited
    description: int, number of unique chapters visited within a course
  - name: courseactivity_last_play_video_timestamp
    description: timestamp, timestamp of user's last play_video event within a course
  - name: courseactivity_last_problem_check_timestamp
    description: timestamp, timestamp of user's last problem_check event within a
      course
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id"]

- name: int__mitxonline__user_courseactivities_daily
  description: MITx Online open edX user activities aggregated daily for all course
    activities from tracking logs
  columns:
  - name: user_username
    description: str, username of the open edX user who caused the event to be emitted.
    tests:
    - not_null
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}.
    tests:
    - not_null
  - name: courseactivity_num_events
    description: int, number of tracking log events (including all course activities)
    tests:
    - not_null
  - name: courseactivity_date
    description: date, date that user has any kind of activities in the course
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["user_username", "courserun_readable_id", "courseactivity_date"]

- name: int__mitxonline__course_structure
  description: this table contains historical changes to open edX's course content
    data. It adds coursestructure_chapter_id that identifies chapter each subsection
    belongs to
  columns:
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: coursestructure_content_hash
    description: str, sha256 hashed string of the course content.
    tests:
    - not_null
  - name: coursestructure_block_content_hash
    description: str, sha256 hashed string of the block content in a course
    tests:
    - not_null
  - name: coursestructure_block_id
    description: str, Unique ID for a distinct piece of content in a course, formatted
      as block-v1:{org}+{course}+{run}type@{block type}+block@{hash code}
    tests:
    - not_null
  - name: coursestructure_parent_block_id
    description: str, parent block ID, same format as block_id
  - name: coursestructure_block_index
    description: int, sequence number giving order in which this block content appears
      within the course
    tests:
    - not_null
  - name: coursestructure_block_category
    description: str, category/type of the block, it identifies core structural elements
      of a course. Value includes but not limited to course, chapter, sequential,
      vertical, discussion, html, problem, video, etc.
    tests:
    - not_null
  - name: coursestructure_block_title
    description: str, title of the block extracted from the metadata of the block.
      This field comes from name field for the section, subsection, or unit on the
      Studio 'Course Outline' page.
  - name: coursestructure_block_metadata
    description: str, json string of the metadata field for the block. It provides
      additional information about this block, different block type may have different
      member fields inside metadata.
    tests:
    - not_null
  - name: courserun_title
    description: str, title of the course extracted from the metadata of 'course'
      block
  - name: courserun_start_on
    description: timestamp, indicating when the course run starts extracted from the
      metadata of 'course' block
  - name: coursestructure_retrieved_at
    description: timestamp, indicating when this course structure was initially retrieved
      from REST API.
    tests:
    - not_null
  - name: coursestructure_chapter_id
    description: str, block id of chapter within which this child block belongs to.
      Null for the 'course' block as it's the top block that doesn't belong to any
      chapter.
  - name: coursestructure_chapter_title
    description: str, title of chapter within which this child block belongs to.
  - name: coursestructure_is_latest
    description: boolean, indicating if the course content is the latest version
  tests:
  - dbt_expectations.expect_table_row_count_to_equal_other_table:
      compare_model: ref('stg__mitxonline__openedx__api__course_structure')

- name: int__mitxonline__courserun_subsection_grades
  description: Persistent values for learners' subsection (aka sequential) grades
    combined with override grades
  columns:
  - name: courserun_readable_id
    description: str, Open edX Course ID formatted as course-v1:{org}+{course code}+{run_tag}
    tests:
    - not_null
  - name: coursestructure_block_id
    description: str, block ID of the subsection (sequential) - foreign key to course_structure
    tests:
    - not_null
  - name: visibleblocks_hash
    description: str, SHA1 hash of visible blocks within the subsection at the time
      of computing the subsection grade. This field might be useful for identifying
      whether the course content was the same for two grades.
    tests:
    - not_null
  - name: coursestructure_block_title
    description: str, title of the subsection
  - name: coursestructure_chapter_id
    description: str, block id of chapter within which this subsection belongs to
  - name: openedx_user_id
    description: int, foreign key to auth_user from open edX platform
    tests:
    - not_null
  - name: subsectiongrade_total_score
    description: float, total score of all problems (both graded and ungraded) for
      the subsection
    tests:
    - not_null
  - name: subsectiongrade_total_earned_score
    description: float, user's total earned score of all problems (both graded and
      ungraded) for the subsection
    tests:
    - not_null
  - name: subsectiongrade_total_graded_score
    description: float, total score of all graded problems for the subsection.
    tests:
    - not_null
  - name: subsectiongrade_total_earned_graded_score
    description: float, user's total earned score of all graded problems for the subsection.
    tests:
    - not_null
  - name: subsectiongrade_is_overridden
    description: boolean, indicating whether this subsection grades are overridden
  - name: subsectiongrade_first_attempted_on
    description: timestamp, time of the user's first attempt at a problem in the subsection.
  - name: subsectiongrade_created_on
    description: timestamp, datetime of the subsection grade was first calculated
      for this user for this subsection.
    tests:
    - not_null
  tests:
  - dbt_expectations.expect_compound_columns_to_be_unique:
      column_list: ["openedx_user_id", "courserun_readable_id", "coursestructure_block_id"]
