[tool.poetry]
name = "ol-data-platform"
version = "0.6.1"
description = "Code and configuration for powering the MIT Open Learning data platform"
authors = ["MIT Open Learning Engineering <ol-data@mit.edu>"]
license = "BSD-3-Clause"
readme = "README.md"
repository = "https://github.com/mitodl/ol-data-platform"
classifiers = [
    'Framework :: Dagster',
    'Operating System :: Linux',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.11',
]
packages = [
    { include = "ol_orchestrate", from = "src/" },
]

[tool.poetry.dependencies]
python = "^3.11"
PyPika = "^0.48.9"
dagit = "^1.3"
dagster = "^1.3"
dagster-airbyte = "^0.19.0"
dagster-aws = "^0.19.0"
dagster-dbt = "^0.19.0"
dagster-docker = "^0.19.0"
dagster-gcp = "^0.19.0"
dagster-ge = "^0.19.0"
dagster-postgres = "^0.19.0"
dagster-shell = "^0.19.0"
dbt-duckdb = "^1.4.1"
dbt-trino = "^1.3.0"
dynaconf = "^3.1.11"
httpx = "^0.24.0"
hvac = "^1.0"
pyarrow = "^12"
pymysql = "^1.0.0"
setuptools = "^68.0.0"  # Add this to avoid errors with installing packages that depend on it for building
dagster-duckdb = "^0.19.13"

[tool.poetry.group.dev.dependencies]
black = "*"
mypy = "*"
pre-commit = "^3"
pytest = "^7.1.2"
ruff = "*"
sqlfluff = "^2.0.0"
typer = {extras = ["all"], version = "^0.9.0"}

[tool.black]
target-version = ["py311"]

[tool.isort]
profile = "black"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.sqlfluff.core]
templater = "jinja"
dialect = "hive"
sql_file_exts = ".sql,.sql.j2,.dml,.ddl"
max_line_length = 120

[tool.sqlfluff.templater]
unwrap_wrapped_queries = true

[tool.sqlfluff.templater.jinja]
apply_dbt_builtins = true
load_macros_from_path = "src/ol_dbt/macros/"

[tool.sqlfluff.templater.dbt]
project_dir = "src/ol_dbt/"
profiles_dir = "src/ol_dbt/"
profile ="open_learning"
target = "qa"

[tool.sqlfluff.layout.type.comma]
# Use leading commas for cleaner diffs
line_position = "leading"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "A",      # flake8-builtins
    # "ARG",  # flake8-unused-arguments
    # "ANN",  # flake8-annotations
    "B",      # flake8-bugbear
    # "BLE",  # flake8-blind-except
    # "C4",   # flake8-comprehensions
    # "COM",  # flake8-commas
    "DTZ",    # flake8-datetimez
    "D",      # pydocstyle
    "E",      # pydocstyle
    "ERA",  # eradicate
    # "EM",   # flake8-errmsg
    "EXE",    # flake8-executable
    "F",      # flake8
    "G",      # flake8-logging-format
    "ICN",    # flake8-import-conventions
    # "INP",    # flake8-no-pep420
    "ISC",    # flake8-implicit-str-concat
    "N",      # pep8-naming
    # "PD",   # pandas-vet
    "PIE",    # flake8-pie
    # "PGH",  # pygrep-hooks                [Enable]
    # "PT",   # flake8-pytest-style         [Enable]
    "PTH",  # flake8-use-pathlib
    "PLR",    # Refactor
    "Q",      # flake8-quotes
    "RET",    # flake8-return
    "S",      # flake8-bandit
    "SIM",    # flake8-simplify
    "T10",    # flake8-debugger
    "T20",    # flake8-print
    "TCH",  # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "W",      # pydocstyle
    "YTT",     # flake8-2020
    "RUF"
]
ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "N801",
    "N802",
    "N803",
    "N806",
    "N813",
    "N815",
    "N816",
    "PIE804",
    "RET504",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "UP007"

]
typing-modules = ["colour.hints"]
fixable = ["I", "D", "B", "E", "F", "UP", "C4", "Q", "RET", "PIE", "SIM","UP", "W", "RUF"]

[tool.ruff.pydocstyle]
convention = "pep257"

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.per-file-ignores]
"test_*.py" = ["S101"]
